// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/channel/definition/channel.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace channel {

namespace {

const ::google::protobuf::Descriptor* AddMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateChannelStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateChannelStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMemberStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMemberStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DissolveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DissolveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRolesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRolesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateChannelStateNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateChannelStateNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMemberStateNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMemberStateNotification_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* Channel_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ChannelOwner_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ChannelSubscriber_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto() {
  protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/channel/definition/channel.proto");
  GOOGLE_CHECK(file != NULL);
  AddMemberRequest_descriptor_ = file->message_type(0);
  static const int AddMemberRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, member_identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, object_id_),
  };
  AddMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMemberRequest_descriptor_,
      AddMemberRequest::default_instance_,
      AddMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMemberRequest));
  RemoveMemberRequest_descriptor_ = file->message_type(1);
  static const int RemoveMemberRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, reason_),
  };
  RemoveMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveMemberRequest_descriptor_,
      RemoveMemberRequest::default_instance_,
      RemoveMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMemberRequest));
  SendMessageRequest_descriptor_ = file->message_type(2);
  static const int SendMessageRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, required_privileges_),
  };
  SendMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMessageRequest_descriptor_,
      SendMessageRequest::default_instance_,
      SendMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMessageRequest));
  UpdateChannelStateRequest_descriptor_ = file->message_type(3);
  static const int UpdateChannelStateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateRequest, state_change_),
  };
  UpdateChannelStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateChannelStateRequest_descriptor_,
      UpdateChannelStateRequest::default_instance_,
      UpdateChannelStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateChannelStateRequest));
  UpdateMemberStateRequest_descriptor_ = file->message_type(4);
  static const int UpdateMemberStateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateRequest, state_change_),
  };
  UpdateMemberStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMemberStateRequest_descriptor_,
      UpdateMemberStateRequest::default_instance_,
      UpdateMemberStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMemberStateRequest));
  DissolveRequest_descriptor_ = file->message_type(5);
  static const int DissolveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DissolveRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DissolveRequest, reason_),
  };
  DissolveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DissolveRequest_descriptor_,
      DissolveRequest::default_instance_,
      DissolveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DissolveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DissolveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DissolveRequest));
  SetRolesRequest_descriptor_ = file->message_type(6);
  static const int SetRolesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRolesRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRolesRequest, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRolesRequest, member_id_),
  };
  SetRolesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetRolesRequest_descriptor_,
      SetRolesRequest::default_instance_,
      SetRolesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRolesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRolesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetRolesRequest));
  AddNotification_descriptor_ = file->message_type(7);
  static const int AddNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNotification, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNotification, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNotification, channel_state_),
  };
  AddNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddNotification_descriptor_,
      AddNotification::default_instance_,
      AddNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddNotification));
  JoinNotification_descriptor_ = file->message_type(8);
  static const int JoinNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNotification, member_),
  };
  JoinNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinNotification_descriptor_,
      JoinNotification::default_instance_,
      JoinNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinNotification));
  RemoveNotification_descriptor_ = file->message_type(9);
  static const int RemoveNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveNotification, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveNotification, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveNotification, reason_),
  };
  RemoveNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveNotification_descriptor_,
      RemoveNotification::default_instance_,
      RemoveNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveNotification));
  LeaveNotification_descriptor_ = file->message_type(10);
  static const int LeaveNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, member_id_),
  };
  LeaveNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveNotification_descriptor_,
      LeaveNotification::default_instance_,
      LeaveNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveNotification));
  SendMessageNotification_descriptor_ = file->message_type(11);
  static const int SendMessageNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, required_privileges_),
  };
  SendMessageNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMessageNotification_descriptor_,
      SendMessageNotification::default_instance_,
      SendMessageNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMessageNotification));
  UpdateChannelStateNotification_descriptor_ = file->message_type(12);
  static const int UpdateChannelStateNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateNotification, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateNotification, state_change_),
  };
  UpdateChannelStateNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateChannelStateNotification_descriptor_,
      UpdateChannelStateNotification::default_instance_,
      UpdateChannelStateNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChannelStateNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateChannelStateNotification));
  UpdateMemberStateNotification_descriptor_ = file->message_type(13);
  static const int UpdateMemberStateNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, state_change_),
  };
  UpdateMemberStateNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMemberStateNotification_descriptor_,
      UpdateMemberStateNotification::default_instance_,
      UpdateMemberStateNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMemberStateNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMemberStateNotification));
  Channel_descriptor_ = file->service(0);
  ChannelOwner_descriptor_ = file->service(1);
  ChannelSubscriber_descriptor_ = file->service(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fchannel_2fdefinition_2fchannel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMemberRequest_descriptor_, &AddMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMemberRequest_descriptor_, &RemoveMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMessageRequest_descriptor_, &SendMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateChannelStateRequest_descriptor_, &UpdateChannelStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMemberStateRequest_descriptor_, &UpdateMemberStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DissolveRequest_descriptor_, &DissolveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetRolesRequest_descriptor_, &SetRolesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddNotification_descriptor_, &AddNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinNotification_descriptor_, &JoinNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveNotification_descriptor_, &RemoveNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveNotification_descriptor_, &LeaveNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMessageNotification_descriptor_, &SendMessageNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateChannelStateNotification_descriptor_, &UpdateChannelStateNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMemberStateNotification_descriptor_, &UpdateMemberStateNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto() {
  delete AddMemberRequest::default_instance_;
  delete AddMemberRequest_reflection_;
  delete RemoveMemberRequest::default_instance_;
  delete RemoveMemberRequest_reflection_;
  delete SendMessageRequest::default_instance_;
  delete SendMessageRequest_reflection_;
  delete UpdateChannelStateRequest::default_instance_;
  delete UpdateChannelStateRequest_reflection_;
  delete UpdateMemberStateRequest::default_instance_;
  delete UpdateMemberStateRequest_reflection_;
  delete DissolveRequest::default_instance_;
  delete DissolveRequest_reflection_;
  delete SetRolesRequest::default_instance_;
  delete SetRolesRequest_reflection_;
  delete AddNotification::default_instance_;
  delete AddNotification_reflection_;
  delete JoinNotification::default_instance_;
  delete JoinNotification_reflection_;
  delete RemoveNotification::default_instance_;
  delete RemoveNotification_reflection_;
  delete LeaveNotification::default_instance_;
  delete LeaveNotification_reflection_;
  delete SendMessageNotification::default_instance_;
  delete SendMessageNotification_reflection_;
  delete UpdateChannelStateNotification::default_instance_;
  delete UpdateChannelStateNotification_reflection_;
  delete UpdateMemberStateNotification::default_instance_;
  delete UpdateMemberStateNotification_reflection_;
}

void protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::bnet::protocol::channel::protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(service/channel/definition/channel.pro"
    "to\022\025bnet.protocol.channel\032\034lib/protocol/"
    "attribute.proto\032\031lib/protocol/entity.pro"
    "to\032\021lib/rpc/rpc.proto\032#service/channel/c"
    "hannel_types.proto\"\265\001\n\020AddMemberRequest\022"
    ")\n\010agent_id\030\001 \001(\0132\027.bnet.protocol.Entity"
    "Id\0220\n\017member_identity\030\002 \002(\0132\027.bnet.proto"
    "col.Identity\0221\n\005state\030\003 \002(\0132\".bnet.proto"
    "col.channel.MemberState\022\021\n\tobject_id\030\004 \002"
    "(\004\"|\n\023RemoveMemberRequest\022)\n\010agent_id\030\001 "
    "\001(\0132\027.bnet.protocol.EntityId\022*\n\tmember_i"
    "d\030\002 \002(\0132\027.bnet.protocol.EntityId\022\016\n\006reas"
    "on\030\003 \001(\r\"\220\001\n\022SendMessageRequest\022)\n\010agent"
    "_id\030\001 \001(\0132\027.bnet.protocol.EntityId\022/\n\007me"
    "ssage\030\002 \002(\0132\036.bnet.protocol.channel.Mess"
    "age\022\036\n\023required_privileges\030\003 \001(\004:\0010\"\201\001\n\031"
    "UpdateChannelStateRequest\022)\n\010agent_id\030\001 "
    "\001(\0132\027.bnet.protocol.EntityId\0229\n\014state_ch"
    "ange\030\002 \002(\0132#.bnet.protocol.channel.Chann"
    "elState\"z\n\030UpdateMemberStateRequest\022)\n\010a"
    "gent_id\030\001 \001(\0132\027.bnet.protocol.EntityId\0223"
    "\n\014state_change\030\002 \003(\0132\035.bnet.protocol.cha"
    "nnel.Member\"L\n\017DissolveRequest\022)\n\010agent_"
    "id\030\001 \001(\0132\027.bnet.protocol.EntityId\022\016\n\006rea"
    "son\030\002 \001(\r\"v\n\017SetRolesRequest\022)\n\010agent_id"
    "\030\001 \001(\0132\027.bnet.protocol.EntityId\022\014\n\004role\030"
    "\002 \003(\r\022*\n\tmember_id\030\003 \003(\0132\027.bnet.protocol"
    ".EntityId\"\251\001\n\017AddNotification\022+\n\004self\030\001 "
    "\001(\0132\035.bnet.protocol.channel.Member\022-\n\006me"
    "mber\030\002 \003(\0132\035.bnet.protocol.channel.Membe"
    "r\022:\n\rchannel_state\030\003 \002(\0132#.bnet.protocol"
    ".channel.ChannelState\"A\n\020JoinNotificatio"
    "n\022-\n\006member\030\001 \002(\0132\035.bnet.protocol.channe"
    "l.Member\"{\n\022RemoveNotification\022)\n\010agent_"
    "id\030\001 \001(\0132\027.bnet.protocol.EntityId\022*\n\tmem"
    "ber_id\030\002 \002(\0132\027.bnet.protocol.EntityId\022\016\n"
    "\006reason\030\003 \001(\r\"j\n\021LeaveNotification\022)\n\010ag"
    "ent_id\030\001 \001(\0132\027.bnet.protocol.EntityId\022*\n"
    "\tmember_id\030\002 \002(\0132\027.bnet.protocol.EntityI"
    "d\"\225\001\n\027SendMessageNotification\022)\n\010agent_i"
    "d\030\001 \001(\0132\027.bnet.protocol.EntityId\022/\n\007mess"
    "age\030\002 \002(\0132\036.bnet.protocol.channel.Messag"
    "e\022\036\n\023required_privileges\030\003 \001(\004:\0010\"\206\001\n\036Up"
    "dateChannelStateNotification\022)\n\010agent_id"
    "\030\001 \001(\0132\027.bnet.protocol.EntityId\0229\n\014state"
    "_change\030\002 \002(\0132#.bnet.protocol.channel.Ch"
    "annelState\"\177\n\035UpdateMemberStateNotificat"
    "ion\022)\n\010agent_id\030\001 \001(\0132\027.bnet.protocol.En"
    "tityId\0223\n\014state_change\030\002 \003(\0132\035.bnet.prot"
    "ocol.channel.Member2\314\004\n\007Channel\022K\n\tAddMe"
    "mber\022\'.bnet.protocol.channel.AddMemberRe"
    "quest\032\025.bnet.protocol.NoData\022Q\n\014RemoveMe"
    "mber\022*.bnet.protocol.channel.RemoveMembe"
    "rRequest\032\025.bnet.protocol.NoData\022O\n\013SendM"
    "essage\022).bnet.protocol.channel.SendMessa"
    "geRequest\032\025.bnet.protocol.NoData\022]\n\022Upda"
    "teChannelState\0220.bnet.protocol.channel.U"
    "pdateChannelStateRequest\032\025.bnet.protocol"
    ".NoData\022[\n\021UpdateMemberState\022/.bnet.prot"
    "ocol.channel.UpdateMemberStateRequest\032\025."
    "bnet.protocol.NoData\022I\n\010Dissolve\022&.bnet."
    "protocol.channel.DissolveRequest\032\025.bnet."
    "protocol.NoData\022I\n\010SetRoles\022&.bnet.proto"
    "col.channel.SetRolesRequest\032\025.bnet.proto"
    "col.NoData2\236\004\n\014ChannelOwner\022g\n\014GetChanne"
    "lId\022*.bnet.protocol.channel.GetChannelId"
    "Request\032+.bnet.protocol.channel.GetChann"
    "elIdResponse\022j\n\rCreateChannel\022+.bnet.pro"
    "tocol.channel.CreateChannelRequest\032,.bne"
    "t.protocol.channel.CreateChannelResponse"
    "\022d\n\013JoinChannel\022).bnet.protocol.channel."
    "JoinChannelRequest\032*.bnet.protocol.chann"
    "el.JoinChannelResponse\022d\n\013FindChannel\022)."
    "bnet.protocol.channel.FindChannelRequest"
    "\032*.bnet.protocol.channel.FindChannelResp"
    "onse\022m\n\016GetChannelInfo\022,.bnet.protocol.c"
    "hannel.GetChannelInfoRequest\032-.bnet.prot"
    "ocol.channel.GetChannelInfoResponse2\240\005\n\021"
    "ChannelSubscriber\022O\n\tNotifyAdd\022&.bnet.pr"
    "otocol.channel.AddNotification\032\032.bnet.pr"
    "otocol.NO_RESPONSE\022Q\n\nNotifyJoin\022\'.bnet."
    "protocol.channel.JoinNotification\032\032.bnet"
    ".protocol.NO_RESPONSE\022U\n\014NotifyRemove\022)."
    "bnet.protocol.channel.RemoveNotification"
    "\032\032.bnet.protocol.NO_RESPONSE\022S\n\013NotifyLe"
    "ave\022(.bnet.protocol.channel.LeaveNotific"
    "ation\032\032.bnet.protocol.NO_RESPONSE\022_\n\021Not"
    "ifySendMessage\022..bnet.protocol.channel.S"
    "endMessageNotification\032\032.bnet.protocol.N"
    "O_RESPONSE\022m\n\030NotifyUpdateChannelState\0225"
    ".bnet.protocol.channel.UpdateChannelStat"
    "eNotification\032\032.bnet.protocol.NO_RESPONS"
    "E\022k\n\027NotifyUpdateMemberState\0224.bnet.prot"
    "ocol.channel.UpdateMemberStateNotificati"
    "on\032\032.bnet.protocol.NO_RESPONSEB\rB\010CChann"
    "el\200\001\001", 3805);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/channel/definition/channel.proto", &protobuf_RegisterTypes);
  AddMemberRequest::default_instance_ = new AddMemberRequest();
  RemoveMemberRequest::default_instance_ = new RemoveMemberRequest();
  SendMessageRequest::default_instance_ = new SendMessageRequest();
  UpdateChannelStateRequest::default_instance_ = new UpdateChannelStateRequest();
  UpdateMemberStateRequest::default_instance_ = new UpdateMemberStateRequest();
  DissolveRequest::default_instance_ = new DissolveRequest();
  SetRolesRequest::default_instance_ = new SetRolesRequest();
  AddNotification::default_instance_ = new AddNotification();
  JoinNotification::default_instance_ = new JoinNotification();
  RemoveNotification::default_instance_ = new RemoveNotification();
  LeaveNotification::default_instance_ = new LeaveNotification();
  SendMessageNotification::default_instance_ = new SendMessageNotification();
  UpdateChannelStateNotification::default_instance_ = new UpdateChannelStateNotification();
  UpdateMemberStateNotification::default_instance_ = new UpdateMemberStateNotification();
  AddMemberRequest::default_instance_->InitAsDefaultInstance();
  RemoveMemberRequest::default_instance_->InitAsDefaultInstance();
  SendMessageRequest::default_instance_->InitAsDefaultInstance();
  UpdateChannelStateRequest::default_instance_->InitAsDefaultInstance();
  UpdateMemberStateRequest::default_instance_->InitAsDefaultInstance();
  DissolveRequest::default_instance_->InitAsDefaultInstance();
  SetRolesRequest::default_instance_->InitAsDefaultInstance();
  AddNotification::default_instance_->InitAsDefaultInstance();
  JoinNotification::default_instance_->InitAsDefaultInstance();
  RemoveNotification::default_instance_->InitAsDefaultInstance();
  LeaveNotification::default_instance_->InitAsDefaultInstance();
  SendMessageNotification::default_instance_->InitAsDefaultInstance();
  UpdateChannelStateNotification::default_instance_->InitAsDefaultInstance();
  UpdateMemberStateNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fchannel_2fdefinition_2fchannel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fchannel_2fdefinition_2fchannel_2eproto {
  StaticDescriptorInitializer_service_2fchannel_2fdefinition_2fchannel_2eproto() {
    protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();
  }
} static_descriptor_initializer_service_2fchannel_2fdefinition_2fchannel_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AddMemberRequest::kAgentIdFieldNumber;
const int AddMemberRequest::kMemberIdentityFieldNumber;
const int AddMemberRequest::kStateFieldNumber;
const int AddMemberRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

AddMemberRequest::AddMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddMemberRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  member_identity_ = const_cast< ::bnet::protocol::Identity*>(&::bnet::protocol::Identity::default_instance());
  state_ = const_cast< ::bnet::protocol::channel::MemberState*>(&::bnet::protocol::channel::MemberState::default_instance());
}

AddMemberRequest::AddMemberRequest(const AddMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  member_identity_ = NULL;
  state_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMemberRequest::~AddMemberRequest() {
  SharedDtor();
}

void AddMemberRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete member_identity_;
    delete state_;
  }
}

void AddMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMemberRequest_descriptor_;
}

const AddMemberRequest& AddMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

AddMemberRequest* AddMemberRequest::default_instance_ = NULL;

AddMemberRequest* AddMemberRequest::New() const {
  return new AddMemberRequest;
}

void AddMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (member_identity_ != NULL) member_identity_->::bnet::protocol::Identity::Clear();
    }
    if (_has_bit(2)) {
      if (state_ != NULL) state_->::bnet::protocol::channel::MemberState::Clear();
    }
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_identity;
        break;
      }
      
      // required .bnet.protocol.Identity member_identity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_identity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_state;
        break;
      }
      
      // required .bnet.protocol.channel.MemberState state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_object_id;
        break;
      }
      
      // required uint64 object_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.Identity member_identity = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_identity(), output);
  }
  
  // required .bnet.protocol.channel.MemberState state = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->state(), output);
  }
  
  // required uint64 object_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.Identity member_identity = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_identity(), target);
  }
  
  // required .bnet.protocol.channel.MemberState state = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->state(), target);
  }
  
  // required uint64 object_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.Identity member_identity = 2;
    if (has_member_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_identity());
    }
    
    // required .bnet.protocol.channel.MemberState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // required uint64 object_id = 4;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMemberRequest::MergeFrom(const AddMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_member_identity()->::bnet::protocol::Identity::MergeFrom(from.member_identity());
    }
    if (from._has_bit(2)) {
      mutable_state()->::bnet::protocol::channel::MemberState::MergeFrom(from.state());
    }
    if (from._has_bit(3)) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMemberRequest::CopyFrom(const AddMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_member_identity()) {
    if (!this->member_identity().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void AddMemberRequest::Swap(AddMemberRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(member_identity_, other->member_identity_);
    std::swap(state_, other->state_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMemberRequest_descriptor_;
  metadata.reflection = AddMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveMemberRequest::kAgentIdFieldNumber;
const int RemoveMemberRequest::kMemberIdFieldNumber;
const int RemoveMemberRequest::kReasonFieldNumber;
#endif  // !_MSC_VER

RemoveMemberRequest::RemoveMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveMemberRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  member_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

RemoveMemberRequest::RemoveMemberRequest(const RemoveMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  member_id_ = NULL;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMemberRequest::~RemoveMemberRequest() {
  SharedDtor();
}

void RemoveMemberRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete member_id_;
  }
}

void RemoveMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMemberRequest_descriptor_;
}

const RemoveMemberRequest& RemoveMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

RemoveMemberRequest* RemoveMemberRequest::default_instance_ = NULL;

RemoveMemberRequest* RemoveMemberRequest::New() const {
  return new RemoveMemberRequest;
}

void RemoveMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (member_id_ != NULL) member_id_->::bnet::protocol::EntityId::Clear();
    }
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_id;
        break;
      }
      
      // required .bnet.protocol.EntityId member_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.EntityId member_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_id(), output);
  }
  
  // optional uint32 reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.EntityId member_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_id(), target);
  }
  
  // optional uint32 reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.EntityId member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }
    
    // optional uint32 reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveMemberRequest::MergeFrom(const RemoveMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_member_id()->::bnet::protocol::EntityId::MergeFrom(from.member_id());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMemberRequest::CopyFrom(const RemoveMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void RemoveMemberRequest::Swap(RemoveMemberRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMemberRequest_descriptor_;
  metadata.reflection = RemoveMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMessageRequest::kAgentIdFieldNumber;
const int SendMessageRequest::kMessageFieldNumber;
const int SendMessageRequest::kRequiredPrivilegesFieldNumber;
#endif  // !_MSC_VER

SendMessageRequest::SendMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMessageRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  message_ = const_cast< ::bnet::protocol::channel::Message*>(&::bnet::protocol::channel::Message::default_instance());
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  message_ = NULL;
  required_privileges_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageRequest::~SendMessageRequest() {
  SharedDtor();
}

void SendMessageRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete message_;
  }
}

void SendMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageRequest_descriptor_;
}

const SendMessageRequest& SendMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

SendMessageRequest* SendMessageRequest::default_instance_ = NULL;

SendMessageRequest* SendMessageRequest::New() const {
  return new SendMessageRequest;
}

void SendMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (message_ != NULL) message_->::bnet::protocol::channel::Message::Clear();
    }
    required_privileges_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required .bnet.protocol.channel.Message message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_required_privileges;
        break;
      }
      
      // optional uint64 required_privileges = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required_privileges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &required_privileges_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.channel.Message message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->message(), output);
  }
  
  // optional uint64 required_privileges = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->required_privileges(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.channel.Message message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }
  
  // optional uint64 required_privileges = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->required_privileges(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.channel.Message message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }
    
    // optional uint64 required_privileges = 3 [default = 0];
    if (has_required_privileges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->required_privileges());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_message()->::bnet::protocol::channel::Message::MergeFrom(from.message());
    }
    if (from._has_bit(2)) {
      set_required_privileges(from.required_privileges());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void SendMessageRequest::Swap(SendMessageRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(message_, other->message_);
    std::swap(required_privileges_, other->required_privileges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageRequest_descriptor_;
  metadata.reflection = SendMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateChannelStateRequest::kAgentIdFieldNumber;
const int UpdateChannelStateRequest::kStateChangeFieldNumber;
#endif  // !_MSC_VER

UpdateChannelStateRequest::UpdateChannelStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateChannelStateRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  state_change_ = const_cast< ::bnet::protocol::channel::ChannelState*>(&::bnet::protocol::channel::ChannelState::default_instance());
}

UpdateChannelStateRequest::UpdateChannelStateRequest(const UpdateChannelStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateChannelStateRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  state_change_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateChannelStateRequest::~UpdateChannelStateRequest() {
  SharedDtor();
}

void UpdateChannelStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete state_change_;
  }
}

void UpdateChannelStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChannelStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateChannelStateRequest_descriptor_;
}

const UpdateChannelStateRequest& UpdateChannelStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

UpdateChannelStateRequest* UpdateChannelStateRequest::default_instance_ = NULL;

UpdateChannelStateRequest* UpdateChannelStateRequest::New() const {
  return new UpdateChannelStateRequest;
}

void UpdateChannelStateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (state_change_ != NULL) state_change_->::bnet::protocol::channel::ChannelState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateChannelStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state_change;
        break;
      }
      
      // required .bnet.protocol.channel.ChannelState state_change = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateChannelStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.channel.ChannelState state_change = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state_change(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateChannelStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.channel.ChannelState state_change = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state_change(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateChannelStateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.channel.ChannelState state_change = 2;
    if (has_state_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_change());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChannelStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateChannelStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateChannelStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateChannelStateRequest::MergeFrom(const UpdateChannelStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_state_change()->::bnet::protocol::channel::ChannelState::MergeFrom(from.state_change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateChannelStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChannelStateRequest::CopyFrom(const UpdateChannelStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChannelStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_state_change()) {
    if (!this->state_change().IsInitialized()) return false;
  }
  return true;
}

void UpdateChannelStateRequest::Swap(UpdateChannelStateRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(state_change_, other->state_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateChannelStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateChannelStateRequest_descriptor_;
  metadata.reflection = UpdateChannelStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMemberStateRequest::kAgentIdFieldNumber;
const int UpdateMemberStateRequest::kStateChangeFieldNumber;
#endif  // !_MSC_VER

UpdateMemberStateRequest::UpdateMemberStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateMemberStateRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

UpdateMemberStateRequest::UpdateMemberStateRequest(const UpdateMemberStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateMemberStateRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMemberStateRequest::~UpdateMemberStateRequest() {
  SharedDtor();
}

void UpdateMemberStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void UpdateMemberStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMemberStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMemberStateRequest_descriptor_;
}

const UpdateMemberStateRequest& UpdateMemberStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

UpdateMemberStateRequest* UpdateMemberStateRequest::default_instance_ = NULL;

UpdateMemberStateRequest* UpdateMemberStateRequest::New() const {
  return new UpdateMemberStateRequest;
}

void UpdateMemberStateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  state_change_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateMemberStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state_change;
        break;
      }
      
      // repeated .bnet.protocol.channel.Member state_change = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state_change;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateMemberStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // repeated .bnet.protocol.channel.Member state_change = 2;
  for (int i = 0; i < this->state_change_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state_change(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateMemberStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // repeated .bnet.protocol.channel.Member state_change = 2;
  for (int i = 0; i < this->state_change_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state_change(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateMemberStateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
  }
  // repeated .bnet.protocol.channel.Member state_change = 2;
  total_size += 1 * this->state_change_size();
  for (int i = 0; i < this->state_change_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state_change(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMemberStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateMemberStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateMemberStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateMemberStateRequest::MergeFrom(const UpdateMemberStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_change_.MergeFrom(from.state_change_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateMemberStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMemberStateRequest::CopyFrom(const UpdateMemberStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMemberStateRequest::IsInitialized() const {
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  for (int i = 0; i < state_change_size(); i++) {
    if (!this->state_change(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateMemberStateRequest::Swap(UpdateMemberStateRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    state_change_.Swap(&other->state_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateMemberStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMemberStateRequest_descriptor_;
  metadata.reflection = UpdateMemberStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DissolveRequest::kAgentIdFieldNumber;
const int DissolveRequest::kReasonFieldNumber;
#endif  // !_MSC_VER

DissolveRequest::DissolveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DissolveRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

DissolveRequest::DissolveRequest(const DissolveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DissolveRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DissolveRequest::~DissolveRequest() {
  SharedDtor();
}

void DissolveRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void DissolveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DissolveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DissolveRequest_descriptor_;
}

const DissolveRequest& DissolveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

DissolveRequest* DissolveRequest::default_instance_ = NULL;

DissolveRequest* DissolveRequest::New() const {
  return new DissolveRequest;
}

void DissolveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DissolveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DissolveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // optional uint32 reason = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DissolveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // optional uint32 reason = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DissolveRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DissolveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DissolveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DissolveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DissolveRequest::MergeFrom(const DissolveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DissolveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DissolveRequest::CopyFrom(const DissolveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DissolveRequest::IsInitialized() const {
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void DissolveRequest::Swap(DissolveRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DissolveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DissolveRequest_descriptor_;
  metadata.reflection = DissolveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetRolesRequest::kAgentIdFieldNumber;
const int SetRolesRequest::kRoleFieldNumber;
const int SetRolesRequest::kMemberIdFieldNumber;
#endif  // !_MSC_VER

SetRolesRequest::SetRolesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetRolesRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

SetRolesRequest::SetRolesRequest(const SetRolesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetRolesRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetRolesRequest::~SetRolesRequest() {
  SharedDtor();
}

void SetRolesRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void SetRolesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRolesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRolesRequest_descriptor_;
}

const SetRolesRequest& SetRolesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

SetRolesRequest* SetRolesRequest::default_instance_ = NULL;

SetRolesRequest* SetRolesRequest::New() const {
  return new SetRolesRequest;
}

void SetRolesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  role_.Clear();
  member_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetRolesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role;
        break;
      }
      
      // repeated uint32 role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_role())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role;
        if (input->ExpectTag(26)) goto parse_member_id;
        break;
      }
      
      // repeated .bnet.protocol.EntityId member_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_member_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetRolesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // repeated uint32 role = 2;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->role(i), output);
  }
  
  // repeated .bnet.protocol.EntityId member_id = 3;
  for (int i = 0; i < this->member_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->member_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetRolesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // repeated uint32 role = 2;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->role(i), target);
  }
  
  // repeated .bnet.protocol.EntityId member_id = 3;
  for (int i = 0; i < this->member_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->member_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetRolesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
  }
  // repeated uint32 role = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role(i));
    }
    total_size += 1 * this->role_size() + data_size;
  }
  
  // repeated .bnet.protocol.EntityId member_id = 3;
  total_size += 1 * this->member_id_size();
  for (int i = 0; i < this->member_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_id(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRolesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetRolesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetRolesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRolesRequest::MergeFrom(const SetRolesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  member_id_.MergeFrom(from.member_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetRolesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRolesRequest::CopyFrom(const SetRolesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRolesRequest::IsInitialized() const {
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  for (int i = 0; i < member_id_size(); i++) {
    if (!this->member_id(i).IsInitialized()) return false;
  }
  return true;
}

void SetRolesRequest::Swap(SetRolesRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    role_.Swap(&other->role_);
    member_id_.Swap(&other->member_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetRolesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRolesRequest_descriptor_;
  metadata.reflection = SetRolesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddNotification::kSelfFieldNumber;
const int AddNotification::kMemberFieldNumber;
const int AddNotification::kChannelStateFieldNumber;
#endif  // !_MSC_VER

AddNotification::AddNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddNotification::InitAsDefaultInstance() {
  self_ = const_cast< ::bnet::protocol::channel::Member*>(&::bnet::protocol::channel::Member::default_instance());
  channel_state_ = const_cast< ::bnet::protocol::channel::ChannelState*>(&::bnet::protocol::channel::ChannelState::default_instance());
}

AddNotification::AddNotification(const AddNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddNotification::SharedCtor() {
  _cached_size_ = 0;
  self_ = NULL;
  channel_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddNotification::~AddNotification() {
  SharedDtor();
}

void AddNotification::SharedDtor() {
  if (this != default_instance_) {
    delete self_;
    delete channel_state_;
  }
}

void AddNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddNotification_descriptor_;
}

const AddNotification& AddNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

AddNotification* AddNotification::default_instance_ = NULL;

AddNotification* AddNotification::New() const {
  return new AddNotification;
}

void AddNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (self_ != NULL) self_->::bnet::protocol::channel::Member::Clear();
    }
    if (_has_bit(2)) {
      if (channel_state_ != NULL) channel_state_->::bnet::protocol::channel::ChannelState::Clear();
    }
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.channel.Member self = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }
      
      // repeated .bnet.protocol.channel.Member member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        if (input->ExpectTag(26)) goto parse_channel_state;
        break;
      }
      
      // required .bnet.protocol.channel.ChannelState channel_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.channel.Member self = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->self(), output);
  }
  
  // repeated .bnet.protocol.channel.Member member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(i), output);
  }
  
  // required .bnet.protocol.channel.ChannelState channel_state = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->channel_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.channel.Member self = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->self(), target);
  }
  
  // repeated .bnet.protocol.channel.Member member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(i), target);
  }
  
  // required .bnet.protocol.channel.ChannelState channel_state = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->channel_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.channel.Member self = 1;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }
    
    // required .bnet.protocol.channel.ChannelState channel_state = 3;
    if (has_channel_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_state());
    }
    
  }
  // repeated .bnet.protocol.channel.Member member = 2;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddNotification::MergeFrom(const AddNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_self()->::bnet::protocol::channel::Member::MergeFrom(from.self());
    }
    if (from._has_bit(2)) {
      mutable_channel_state()->::bnet::protocol::channel::ChannelState::MergeFrom(from.channel_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNotification::CopyFrom(const AddNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_self()) {
    if (!this->self().IsInitialized()) return false;
  }
  for (int i = 0; i < member_size(); i++) {
    if (!this->member(i).IsInitialized()) return false;
  }
  if (has_channel_state()) {
    if (!this->channel_state().IsInitialized()) return false;
  }
  return true;
}

void AddNotification::Swap(AddNotification* other) {
  if (other != this) {
    std::swap(self_, other->self_);
    member_.Swap(&other->member_);
    std::swap(channel_state_, other->channel_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddNotification_descriptor_;
  metadata.reflection = AddNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinNotification::kMemberFieldNumber;
#endif  // !_MSC_VER

JoinNotification::JoinNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinNotification::InitAsDefaultInstance() {
  member_ = const_cast< ::bnet::protocol::channel::Member*>(&::bnet::protocol::channel::Member::default_instance());
}

JoinNotification::JoinNotification(const JoinNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinNotification::SharedCtor() {
  _cached_size_ = 0;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinNotification::~JoinNotification() {
  SharedDtor();
}

void JoinNotification::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void JoinNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinNotification_descriptor_;
}

const JoinNotification& JoinNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

JoinNotification* JoinNotification::default_instance_ = NULL;

JoinNotification* JoinNotification::New() const {
  return new JoinNotification;
}

void JoinNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (member_ != NULL) member_->::bnet::protocol::channel::Member::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.channel.Member member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.channel.Member member = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.channel.Member member = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.channel.Member member = 1;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinNotification::MergeFrom(const JoinNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_member()->::bnet::protocol::channel::Member::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinNotification::CopyFrom(const JoinNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  return true;
}

void JoinNotification::Swap(JoinNotification* other) {
  if (other != this) {
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinNotification_descriptor_;
  metadata.reflection = JoinNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveNotification::kAgentIdFieldNumber;
const int RemoveNotification::kMemberIdFieldNumber;
const int RemoveNotification::kReasonFieldNumber;
#endif  // !_MSC_VER

RemoveNotification::RemoveNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveNotification::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  member_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

RemoveNotification::RemoveNotification(const RemoveNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveNotification::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  member_id_ = NULL;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveNotification::~RemoveNotification() {
  SharedDtor();
}

void RemoveNotification::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete member_id_;
  }
}

void RemoveNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveNotification_descriptor_;
}

const RemoveNotification& RemoveNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

RemoveNotification* RemoveNotification::default_instance_ = NULL;

RemoveNotification* RemoveNotification::New() const {
  return new RemoveNotification;
}

void RemoveNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (member_id_ != NULL) member_id_->::bnet::protocol::EntityId::Clear();
    }
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_id;
        break;
      }
      
      // required .bnet.protocol.EntityId member_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.EntityId member_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_id(), output);
  }
  
  // optional uint32 reason = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.EntityId member_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_id(), target);
  }
  
  // optional uint32 reason = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.EntityId member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }
    
    // optional uint32 reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveNotification::MergeFrom(const RemoveNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_member_id()->::bnet::protocol::EntityId::MergeFrom(from.member_id());
    }
    if (from._has_bit(2)) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveNotification::CopyFrom(const RemoveNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void RemoveNotification::Swap(RemoveNotification* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveNotification_descriptor_;
  metadata.reflection = RemoveNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveNotification::kAgentIdFieldNumber;
const int LeaveNotification::kMemberIdFieldNumber;
#endif  // !_MSC_VER

LeaveNotification::LeaveNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveNotification::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  member_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

LeaveNotification::LeaveNotification(const LeaveNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveNotification::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  member_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveNotification::~LeaveNotification() {
  SharedDtor();
}

void LeaveNotification::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete member_id_;
  }
}

void LeaveNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveNotification_descriptor_;
}

const LeaveNotification& LeaveNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

LeaveNotification* LeaveNotification::default_instance_ = NULL;

LeaveNotification* LeaveNotification::New() const {
  return new LeaveNotification;
}

void LeaveNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (member_id_ != NULL) member_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_id;
        break;
      }
      
      // required .bnet.protocol.EntityId member_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.EntityId member_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.EntityId member_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.EntityId member_id = 2;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveNotification::MergeFrom(const LeaveNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_member_id()->::bnet::protocol::EntityId::MergeFrom(from.member_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveNotification::CopyFrom(const LeaveNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void LeaveNotification::Swap(LeaveNotification* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveNotification_descriptor_;
  metadata.reflection = LeaveNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMessageNotification::kAgentIdFieldNumber;
const int SendMessageNotification::kMessageFieldNumber;
const int SendMessageNotification::kRequiredPrivilegesFieldNumber;
#endif  // !_MSC_VER

SendMessageNotification::SendMessageNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMessageNotification::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  message_ = const_cast< ::bnet::protocol::channel::Message*>(&::bnet::protocol::channel::Message::default_instance());
}

SendMessageNotification::SendMessageNotification(const SendMessageNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMessageNotification::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  message_ = NULL;
  required_privileges_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageNotification::~SendMessageNotification() {
  SharedDtor();
}

void SendMessageNotification::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete message_;
  }
}

void SendMessageNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageNotification_descriptor_;
}

const SendMessageNotification& SendMessageNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

SendMessageNotification* SendMessageNotification::default_instance_ = NULL;

SendMessageNotification* SendMessageNotification::New() const {
  return new SendMessageNotification;
}

void SendMessageNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (message_ != NULL) message_->::bnet::protocol::channel::Message::Clear();
    }
    required_privileges_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMessageNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required .bnet.protocol.channel.Message message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_required_privileges;
        break;
      }
      
      // optional uint64 required_privileges = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_required_privileges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &required_privileges_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMessageNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.channel.Message message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->message(), output);
  }
  
  // optional uint64 required_privileges = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->required_privileges(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMessageNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.channel.Message message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }
  
  // optional uint64 required_privileges = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->required_privileges(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMessageNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.channel.Message message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }
    
    // optional uint64 required_privileges = 3 [default = 0];
    if (has_required_privileges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->required_privileges());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMessageNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMessageNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMessageNotification::MergeFrom(const SendMessageNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_message()->::bnet::protocol::channel::Message::MergeFrom(from.message());
    }
    if (from._has_bit(2)) {
      set_required_privileges(from.required_privileges());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMessageNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageNotification::CopyFrom(const SendMessageNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void SendMessageNotification::Swap(SendMessageNotification* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(message_, other->message_);
    std::swap(required_privileges_, other->required_privileges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMessageNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageNotification_descriptor_;
  metadata.reflection = SendMessageNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateChannelStateNotification::kAgentIdFieldNumber;
const int UpdateChannelStateNotification::kStateChangeFieldNumber;
#endif  // !_MSC_VER

UpdateChannelStateNotification::UpdateChannelStateNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateChannelStateNotification::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  state_change_ = const_cast< ::bnet::protocol::channel::ChannelState*>(&::bnet::protocol::channel::ChannelState::default_instance());
}

UpdateChannelStateNotification::UpdateChannelStateNotification(const UpdateChannelStateNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateChannelStateNotification::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  state_change_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateChannelStateNotification::~UpdateChannelStateNotification() {
  SharedDtor();
}

void UpdateChannelStateNotification::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete state_change_;
  }
}

void UpdateChannelStateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateChannelStateNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateChannelStateNotification_descriptor_;
}

const UpdateChannelStateNotification& UpdateChannelStateNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

UpdateChannelStateNotification* UpdateChannelStateNotification::default_instance_ = NULL;

UpdateChannelStateNotification* UpdateChannelStateNotification::New() const {
  return new UpdateChannelStateNotification;
}

void UpdateChannelStateNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (state_change_ != NULL) state_change_->::bnet::protocol::channel::ChannelState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateChannelStateNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state_change;
        break;
      }
      
      // required .bnet.protocol.channel.ChannelState state_change = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateChannelStateNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.channel.ChannelState state_change = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state_change(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateChannelStateNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.channel.ChannelState state_change = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state_change(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateChannelStateNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.channel.ChannelState state_change = 2;
    if (has_state_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_change());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateChannelStateNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateChannelStateNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateChannelStateNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateChannelStateNotification::MergeFrom(const UpdateChannelStateNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_state_change()->::bnet::protocol::channel::ChannelState::MergeFrom(from.state_change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateChannelStateNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChannelStateNotification::CopyFrom(const UpdateChannelStateNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChannelStateNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_state_change()) {
    if (!this->state_change().IsInitialized()) return false;
  }
  return true;
}

void UpdateChannelStateNotification::Swap(UpdateChannelStateNotification* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(state_change_, other->state_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateChannelStateNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateChannelStateNotification_descriptor_;
  metadata.reflection = UpdateChannelStateNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMemberStateNotification::kAgentIdFieldNumber;
const int UpdateMemberStateNotification::kStateChangeFieldNumber;
#endif  // !_MSC_VER

UpdateMemberStateNotification::UpdateMemberStateNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateMemberStateNotification::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

UpdateMemberStateNotification::UpdateMemberStateNotification(const UpdateMemberStateNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateMemberStateNotification::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMemberStateNotification::~UpdateMemberStateNotification() {
  SharedDtor();
}

void UpdateMemberStateNotification::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void UpdateMemberStateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMemberStateNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMemberStateNotification_descriptor_;
}

const UpdateMemberStateNotification& UpdateMemberStateNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2fchannel_2fdefinition_2fchannel_2eproto();  return *default_instance_;
}

UpdateMemberStateNotification* UpdateMemberStateNotification::default_instance_ = NULL;

UpdateMemberStateNotification* UpdateMemberStateNotification::New() const {
  return new UpdateMemberStateNotification;
}

void UpdateMemberStateNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  state_change_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateMemberStateNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state_change;
        break;
      }
      
      // repeated .bnet.protocol.channel.Member state_change = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state_change;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateMemberStateNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // repeated .bnet.protocol.channel.Member state_change = 2;
  for (int i = 0; i < this->state_change_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state_change(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateMemberStateNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // repeated .bnet.protocol.channel.Member state_change = 2;
  for (int i = 0; i < this->state_change_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state_change(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateMemberStateNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
  }
  // repeated .bnet.protocol.channel.Member state_change = 2;
  total_size += 1 * this->state_change_size();
  for (int i = 0; i < this->state_change_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state_change(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMemberStateNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateMemberStateNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateMemberStateNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateMemberStateNotification::MergeFrom(const UpdateMemberStateNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_change_.MergeFrom(from.state_change_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateMemberStateNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMemberStateNotification::CopyFrom(const UpdateMemberStateNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMemberStateNotification::IsInitialized() const {
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  for (int i = 0; i < state_change_size(); i++) {
    if (!this->state_change(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateMemberStateNotification::Swap(UpdateMemberStateNotification* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    state_change_.Swap(&other->state_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateMemberStateNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMemberStateNotification_descriptor_;
  metadata.reflection = UpdateMemberStateNotification_reflection_;
  return metadata;
}


// ===================================================================

Channel::~Channel() {}

const ::google::protobuf::ServiceDescriptor* Channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channel_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Channel::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channel_descriptor_;
}

void Channel::AddMember(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::AddMemberRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddMember() not implemented.");
  done->Run();
}

void Channel::RemoveMember(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::RemoveMemberRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveMember() not implemented.");
  done->Run();
}

void Channel::SendMessage(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::SendMessageRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendMessage() not implemented.");
  done->Run();
}

void Channel::UpdateChannelState(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::UpdateChannelStateRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateChannelState() not implemented.");
  done->Run();
}

void Channel::UpdateMemberState(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::UpdateMemberStateRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateMemberState() not implemented.");
  done->Run();
}

void Channel::Dissolve(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::DissolveRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Dissolve() not implemented.");
  done->Run();
}

void Channel::SetRoles(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::SetRolesRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetRoles() not implemented.");
  done->Run();
}

void Channel::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Channel_descriptor_);
  switch(method->index()) {
    case 0:
      AddMember(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::AddMemberRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    case 1:
      RemoveMember(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::RemoveMemberRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    case 2:
      SendMessage(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::SendMessageRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    case 3:
      UpdateChannelState(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::UpdateChannelStateRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    case 4:
      UpdateMemberState(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::UpdateMemberStateRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    case 5:
      Dissolve(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::DissolveRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    case 6:
      SetRoles(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::SetRolesRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Channel::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::channel::AddMemberRequest::default_instance();
    case 1:
      return ::bnet::protocol::channel::RemoveMemberRequest::default_instance();
    case 2:
      return ::bnet::protocol::channel::SendMessageRequest::default_instance();
    case 3:
      return ::bnet::protocol::channel::UpdateChannelStateRequest::default_instance();
    case 4:
      return ::bnet::protocol::channel::UpdateMemberStateRequest::default_instance();
    case 5:
      return ::bnet::protocol::channel::DissolveRequest::default_instance();
    case 6:
      return ::bnet::protocol::channel::SetRolesRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& Channel::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::NoData::default_instance();
    case 1:
      return ::bnet::protocol::NoData::default_instance();
    case 2:
      return ::bnet::protocol::NoData::default_instance();
    case 3:
      return ::bnet::protocol::NoData::default_instance();
    case 4:
      return ::bnet::protocol::NoData::default_instance();
    case 5:
      return ::bnet::protocol::NoData::default_instance();
    case 6:
      return ::bnet::protocol::NoData::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

Channel_Stub::Channel_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Channel_Stub::Channel_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Channel_Stub::~Channel_Stub() {
  if (owns_channel_) delete channel_;
}

void Channel_Stub::AddMember(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::AddMemberRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Channel_Stub::RemoveMember(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::RemoveMemberRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Channel_Stub::SendMessage(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::SendMessageRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Channel_Stub::UpdateChannelState(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::UpdateChannelStateRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Channel_Stub::UpdateMemberState(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::UpdateMemberStateRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Channel_Stub::Dissolve(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::DissolveRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Channel_Stub::SetRoles(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::SetRolesRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
// ===================================================================

ChannelOwner::~ChannelOwner() {}

const ::google::protobuf::ServiceDescriptor* ChannelOwner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelOwner_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ChannelOwner::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelOwner_descriptor_;
}

void ChannelOwner::GetChannelId(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::GetChannelIdRequest*,
                         ::bnet::protocol::channel::GetChannelIdResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChannelId() not implemented.");
  done->Run();
}

void ChannelOwner::CreateChannel(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::CreateChannelRequest*,
                         ::bnet::protocol::channel::CreateChannelResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateChannel() not implemented.");
  done->Run();
}

void ChannelOwner::JoinChannel(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::JoinChannelRequest*,
                         ::bnet::protocol::channel::JoinChannelResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JoinChannel() not implemented.");
  done->Run();
}

void ChannelOwner::FindChannel(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::FindChannelRequest*,
                         ::bnet::protocol::channel::FindChannelResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FindChannel() not implemented.");
  done->Run();
}

void ChannelOwner::GetChannelInfo(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::GetChannelInfoRequest*,
                         ::bnet::protocol::channel::GetChannelInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChannelInfo() not implemented.");
  done->Run();
}

void ChannelOwner::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ChannelOwner_descriptor_);
  switch(method->index()) {
    case 0:
      GetChannelId(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::GetChannelIdRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::channel::GetChannelIdResponse*>(response),
             done);
      break;
    case 1:
      CreateChannel(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::CreateChannelRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::channel::CreateChannelResponse*>(response),
             done);
      break;
    case 2:
      JoinChannel(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::JoinChannelRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::channel::JoinChannelResponse*>(response),
             done);
      break;
    case 3:
      FindChannel(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::FindChannelRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::channel::FindChannelResponse*>(response),
             done);
      break;
    case 4:
      GetChannelInfo(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::GetChannelInfoRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::channel::GetChannelInfoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChannelOwner::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::channel::GetChannelIdRequest::default_instance();
    case 1:
      return ::bnet::protocol::channel::CreateChannelRequest::default_instance();
    case 2:
      return ::bnet::protocol::channel::JoinChannelRequest::default_instance();
    case 3:
      return ::bnet::protocol::channel::FindChannelRequest::default_instance();
    case 4:
      return ::bnet::protocol::channel::GetChannelInfoRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ChannelOwner::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::channel::GetChannelIdResponse::default_instance();
    case 1:
      return ::bnet::protocol::channel::CreateChannelResponse::default_instance();
    case 2:
      return ::bnet::protocol::channel::JoinChannelResponse::default_instance();
    case 3:
      return ::bnet::protocol::channel::FindChannelResponse::default_instance();
    case 4:
      return ::bnet::protocol::channel::GetChannelInfoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ChannelOwner_Stub::ChannelOwner_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChannelOwner_Stub::ChannelOwner_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChannelOwner_Stub::~ChannelOwner_Stub() {
  if (owns_channel_) delete channel_;
}

void ChannelOwner_Stub::GetChannelId(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::GetChannelIdRequest* request,
                              ::bnet::protocol::channel::GetChannelIdResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChannelOwner_Stub::CreateChannel(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::CreateChannelRequest* request,
                              ::bnet::protocol::channel::CreateChannelResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChannelOwner_Stub::JoinChannel(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::JoinChannelRequest* request,
                              ::bnet::protocol::channel::JoinChannelResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChannelOwner_Stub::FindChannel(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::FindChannelRequest* request,
                              ::bnet::protocol::channel::FindChannelResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ChannelOwner_Stub::GetChannelInfo(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::GetChannelInfoRequest* request,
                              ::bnet::protocol::channel::GetChannelInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
// ===================================================================

ChannelSubscriber::~ChannelSubscriber() {}

const ::google::protobuf::ServiceDescriptor* ChannelSubscriber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelSubscriber_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ChannelSubscriber::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelSubscriber_descriptor_;
}

void ChannelSubscriber::NotifyAdd(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::AddNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyAdd() not implemented.");
  done->Run();
}

void ChannelSubscriber::NotifyJoin(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::JoinNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyJoin() not implemented.");
  done->Run();
}

void ChannelSubscriber::NotifyRemove(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::RemoveNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyRemove() not implemented.");
  done->Run();
}

void ChannelSubscriber::NotifyLeave(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::LeaveNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyLeave() not implemented.");
  done->Run();
}

void ChannelSubscriber::NotifySendMessage(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::SendMessageNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifySendMessage() not implemented.");
  done->Run();
}

void ChannelSubscriber::NotifyUpdateChannelState(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::UpdateChannelStateNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUpdateChannelState() not implemented.");
  done->Run();
}

void ChannelSubscriber::NotifyUpdateMemberState(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::UpdateMemberStateNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyUpdateMemberState() not implemented.");
  done->Run();
}

void ChannelSubscriber::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ChannelSubscriber_descriptor_);
  switch(method->index()) {
    case 0:
      NotifyAdd(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::AddNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    case 1:
      NotifyJoin(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::JoinNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    case 2:
      NotifyRemove(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::RemoveNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    case 3:
      NotifyLeave(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::LeaveNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    case 4:
      NotifySendMessage(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::SendMessageNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    case 5:
      NotifyUpdateChannelState(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::UpdateChannelStateNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    case 6:
      NotifyUpdateMemberState(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::UpdateMemberStateNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChannelSubscriber::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::channel::AddNotification::default_instance();
    case 1:
      return ::bnet::protocol::channel::JoinNotification::default_instance();
    case 2:
      return ::bnet::protocol::channel::RemoveNotification::default_instance();
    case 3:
      return ::bnet::protocol::channel::LeaveNotification::default_instance();
    case 4:
      return ::bnet::protocol::channel::SendMessageNotification::default_instance();
    case 5:
      return ::bnet::protocol::channel::UpdateChannelStateNotification::default_instance();
    case 6:
      return ::bnet::protocol::channel::UpdateMemberStateNotification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ChannelSubscriber::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    case 1:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    case 2:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    case 3:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    case 4:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    case 5:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    case 6:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ChannelSubscriber_Stub::ChannelSubscriber_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChannelSubscriber_Stub::ChannelSubscriber_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChannelSubscriber_Stub::~ChannelSubscriber_Stub() {
  if (owns_channel_) delete channel_;
}

void ChannelSubscriber_Stub::NotifyAdd(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::AddNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChannelSubscriber_Stub::NotifyJoin(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::JoinNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChannelSubscriber_Stub::NotifyRemove(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::RemoveNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChannelSubscriber_Stub::NotifyLeave(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::LeaveNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ChannelSubscriber_Stub::NotifySendMessage(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::SendMessageNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ChannelSubscriber_Stub::NotifyUpdateChannelState(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::UpdateChannelStateNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ChannelSubscriber_Stub::NotifyUpdateMemberState(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::UpdateMemberStateNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace channel
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
