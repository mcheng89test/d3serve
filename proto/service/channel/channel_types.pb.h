// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/channel/channel_types.proto

#ifndef PROTOBUF_service_2fchannel_2fchannel_5ftypes_2eproto__INCLUDED
#define PROTOBUF_service_2fchannel_2fchannel_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "lib/protocol/attribute.pb.h"
#include "lib/protocol/entity.pb.h"
#include "lib/protocol/invitation.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace channel {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();

class Message;
class ChannelDescription;
class ChannelInfo;
class GetChannelInfoRequest;
class GetChannelInfoResponse;
class GetChannelIdRequest;
class GetChannelIdResponse;
class CreateChannelRequest;
class CreateChannelResponse;
class JoinChannelRequest;
class JoinChannelResponse;
class FindChannelRequest;
class FindChannelResponse;
class ChannelState;
class MemberState;
class Member;

enum ChannelState_PrivacyLevel {
  ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN = 1,
  ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND = 2,
  ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN_INVITATION = 3,
  ChannelState_PrivacyLevel_PRIVACY_LEVEL_CLOSED = 4
};
bool ChannelState_PrivacyLevel_IsValid(int value);
const ChannelState_PrivacyLevel ChannelState_PrivacyLevel_PrivacyLevel_MIN = ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN;
const ChannelState_PrivacyLevel ChannelState_PrivacyLevel_PrivacyLevel_MAX = ChannelState_PrivacyLevel_PRIVACY_LEVEL_CLOSED;
const int ChannelState_PrivacyLevel_PrivacyLevel_ARRAYSIZE = ChannelState_PrivacyLevel_PrivacyLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelState_PrivacyLevel_descriptor();
inline const ::std::string& ChannelState_PrivacyLevel_Name(ChannelState_PrivacyLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelState_PrivacyLevel_descriptor(), value);
}
inline bool ChannelState_PrivacyLevel_Parse(
    const ::std::string& name, ChannelState_PrivacyLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelState_PrivacyLevel>(
    ChannelState_PrivacyLevel_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();
  
  Message(const Message& from);
  
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();
  
  void Swap(Message* other);
  
  // implements Message ----------------------------------------------
  
  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // optional uint32 role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline ::google::protobuf::uint32 role() const;
  inline void set_role(::google::protobuf::uint32 value);
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Message)
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.Message)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  ::google::protobuf::uint32 role_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class ChannelDescription : public ::google::protobuf::Message {
 public:
  ChannelDescription();
  virtual ~ChannelDescription();
  
  ChannelDescription(const ChannelDescription& from);
  
  inline ChannelDescription& operator=(const ChannelDescription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelDescription& default_instance();
  
  void Swap(ChannelDescription* other);
  
  // implements Message ----------------------------------------------
  
  ChannelDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelDescription& from);
  void MergeFrom(const ChannelDescription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.EntityId channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& channel_id() const;
  inline ::bnet::protocol::EntityId* mutable_channel_id();
  
  // optional uint32 current_members = 2;
  inline bool has_current_members() const;
  inline void clear_current_members();
  static const int kCurrentMembersFieldNumber = 2;
  inline ::google::protobuf::uint32 current_members() const;
  inline void set_current_members(::google::protobuf::uint32 value);
  
  // optional .bnet.protocol.channel.ChannelState state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline const ::bnet::protocol::channel::ChannelState& state() const;
  inline ::bnet::protocol::channel::ChannelState* mutable_state();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ChannelDescription)
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.ChannelDescription)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::bnet::protocol::EntityId* channel_id_;
  ::google::protobuf::uint32 current_members_;
  ::bnet::protocol::channel::ChannelState* state_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ChannelDescription* default_instance_;
};
// -------------------------------------------------------------------

class ChannelInfo : public ::google::protobuf::Message {
 public:
  ChannelInfo();
  virtual ~ChannelInfo();
  
  ChannelInfo(const ChannelInfo& from);
  
  inline ChannelInfo& operator=(const ChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelInfo& default_instance();
  
  void Swap(ChannelInfo* other);
  
  // implements Message ----------------------------------------------
  
  ChannelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelInfo& from);
  void MergeFrom(const ChannelInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.channel.ChannelDescription description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::bnet::protocol::channel::ChannelDescription& description() const;
  inline ::bnet::protocol::channel::ChannelDescription* mutable_description();
  
  // repeated .bnet.protocol.channel.Member member = 2;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 2;
  inline const ::bnet::protocol::channel::Member& member(int index) const;
  inline ::bnet::protocol::channel::Member* mutable_member(int index);
  inline ::bnet::protocol::channel::Member* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >*
      mutable_member();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ChannelInfo)
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.ChannelInfo)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::bnet::protocol::channel::ChannelDescription* description_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member > member_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ChannelInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetChannelInfoRequest : public ::google::protobuf::Message {
 public:
  GetChannelInfoRequest();
  virtual ~GetChannelInfoRequest();
  
  GetChannelInfoRequest(const GetChannelInfoRequest& from);
  
  inline GetChannelInfoRequest& operator=(const GetChannelInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChannelInfoRequest& default_instance();
  
  void Swap(GetChannelInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetChannelInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetChannelInfoRequest& from);
  void MergeFrom(const GetChannelInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& agent_id() const;
  inline ::bnet::protocol::EntityId* mutable_agent_id();
  
  // required .bnet.protocol.EntityId channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& channel_id() const;
  inline ::bnet::protocol::EntityId* mutable_channel_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.GetChannelInfoRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::bnet::protocol::EntityId* agent_id_;
  ::bnet::protocol::EntityId* channel_id_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetChannelInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetChannelInfoResponse : public ::google::protobuf::Message {
 public:
  GetChannelInfoResponse();
  virtual ~GetChannelInfoResponse();
  
  GetChannelInfoResponse(const GetChannelInfoResponse& from);
  
  inline GetChannelInfoResponse& operator=(const GetChannelInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChannelInfoResponse& default_instance();
  
  void Swap(GetChannelInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetChannelInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetChannelInfoResponse& from);
  void MergeFrom(const GetChannelInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.channel.ChannelInfo channel_info = 1;
  inline bool has_channel_info() const;
  inline void clear_channel_info();
  static const int kChannelInfoFieldNumber = 1;
  inline const ::bnet::protocol::channel::ChannelInfo& channel_info() const;
  inline ::bnet::protocol::channel::ChannelInfo* mutable_channel_info();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.GetChannelInfoResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::bnet::protocol::channel::ChannelInfo* channel_info_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetChannelInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetChannelIdRequest : public ::google::protobuf::Message {
 public:
  GetChannelIdRequest();
  virtual ~GetChannelIdRequest();
  
  GetChannelIdRequest(const GetChannelIdRequest& from);
  
  inline GetChannelIdRequest& operator=(const GetChannelIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChannelIdRequest& default_instance();
  
  void Swap(GetChannelIdRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetChannelIdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetChannelIdRequest& from);
  void MergeFrom(const GetChannelIdRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.GetChannelIdRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetChannelIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetChannelIdResponse : public ::google::protobuf::Message {
 public:
  GetChannelIdResponse();
  virtual ~GetChannelIdResponse();
  
  GetChannelIdResponse(const GetChannelIdResponse& from);
  
  inline GetChannelIdResponse& operator=(const GetChannelIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChannelIdResponse& default_instance();
  
  void Swap(GetChannelIdResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetChannelIdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetChannelIdResponse& from);
  void MergeFrom(const GetChannelIdResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.EntityId channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline const ::bnet::protocol::EntityId& channel_id() const;
  inline ::bnet::protocol::EntityId* mutable_channel_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.GetChannelIdResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::bnet::protocol::EntityId* channel_id_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetChannelIdResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateChannelRequest : public ::google::protobuf::Message {
 public:
  CreateChannelRequest();
  virtual ~CreateChannelRequest();
  
  CreateChannelRequest(const CreateChannelRequest& from);
  
  inline CreateChannelRequest& operator=(const CreateChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChannelRequest& default_instance();
  
  void Swap(CreateChannelRequest* other);
  
  // implements Message ----------------------------------------------
  
  CreateChannelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateChannelRequest& from);
  void MergeFrom(const CreateChannelRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.Identity agent_identity = 1;
  inline bool has_agent_identity() const;
  inline void clear_agent_identity();
  static const int kAgentIdentityFieldNumber = 1;
  inline const ::bnet::protocol::Identity& agent_identity() const;
  inline ::bnet::protocol::Identity* mutable_agent_identity();
  
  // optional .bnet.protocol.channel.ChannelState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::bnet::protocol::channel::ChannelState& state() const;
  inline ::bnet::protocol::channel::ChannelState* mutable_state();
  
  // optional .bnet.protocol.EntityId channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& channel_id() const;
  inline ::bnet::protocol::EntityId* mutable_channel_id();
  
  // optional uint64 object_id = 4;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 4;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.CreateChannelRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::bnet::protocol::Identity* agent_identity_;
  ::bnet::protocol::channel::ChannelState* state_;
  ::bnet::protocol::EntityId* channel_id_;
  ::google::protobuf::uint64 object_id_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CreateChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateChannelResponse : public ::google::protobuf::Message {
 public:
  CreateChannelResponse();
  virtual ~CreateChannelResponse();
  
  CreateChannelResponse(const CreateChannelResponse& from);
  
  inline CreateChannelResponse& operator=(const CreateChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChannelResponse& default_instance();
  
  void Swap(CreateChannelResponse* other);
  
  // implements Message ----------------------------------------------
  
  CreateChannelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateChannelResponse& from);
  void MergeFrom(const CreateChannelResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 object_id = 1;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);
  
  // optional .bnet.protocol.EntityId channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& channel_id() const;
  inline ::bnet::protocol::EntityId* mutable_channel_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.CreateChannelResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 object_id_;
  ::bnet::protocol::EntityId* channel_id_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CreateChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class JoinChannelRequest : public ::google::protobuf::Message {
 public:
  JoinChannelRequest();
  virtual ~JoinChannelRequest();
  
  JoinChannelRequest(const JoinChannelRequest& from);
  
  inline JoinChannelRequest& operator=(const JoinChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinChannelRequest& default_instance();
  
  void Swap(JoinChannelRequest* other);
  
  // implements Message ----------------------------------------------
  
  JoinChannelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinChannelRequest& from);
  void MergeFrom(const JoinChannelRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bnet.protocol.Identity agent_identity = 1;
  inline bool has_agent_identity() const;
  inline void clear_agent_identity();
  static const int kAgentIdentityFieldNumber = 1;
  inline const ::bnet::protocol::Identity& agent_identity() const;
  inline ::bnet::protocol::Identity* mutable_agent_identity();
  
  // required .bnet.protocol.EntityId channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline const ::bnet::protocol::EntityId& channel_id() const;
  inline ::bnet::protocol::EntityId* mutable_channel_id();
  
  // required uint64 object_id = 3;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 3;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);
  
  // repeated .bnet.protocol.EntityId friend_account_id = 4;
  inline int friend_account_id_size() const;
  inline void clear_friend_account_id();
  static const int kFriendAccountIdFieldNumber = 4;
  inline const ::bnet::protocol::EntityId& friend_account_id(int index) const;
  inline ::bnet::protocol::EntityId* mutable_friend_account_id(int index);
  inline ::bnet::protocol::EntityId* add_friend_account_id();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >&
      friend_account_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >*
      mutable_friend_account_id();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.JoinChannelRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::bnet::protocol::Identity* agent_identity_;
  ::bnet::protocol::EntityId* channel_id_;
  ::google::protobuf::uint64 object_id_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId > friend_account_id_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static JoinChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class JoinChannelResponse : public ::google::protobuf::Message {
 public:
  JoinChannelResponse();
  virtual ~JoinChannelResponse();
  
  JoinChannelResponse(const JoinChannelResponse& from);
  
  inline JoinChannelResponse& operator=(const JoinChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinChannelResponse& default_instance();
  
  void Swap(JoinChannelResponse* other);
  
  // implements Message ----------------------------------------------
  
  JoinChannelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinChannelResponse& from);
  void MergeFrom(const JoinChannelResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 object_id = 1;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);
  
  // optional bool require_friend_validation = 2 [default = false];
  inline bool has_require_friend_validation() const;
  inline void clear_require_friend_validation();
  static const int kRequireFriendValidationFieldNumber = 2;
  inline bool require_friend_validation() const;
  inline void set_require_friend_validation(bool value);
  
  // repeated .bnet.protocol.EntityId privileged_account = 3;
  inline int privileged_account_size() const;
  inline void clear_privileged_account();
  static const int kPrivilegedAccountFieldNumber = 3;
  inline const ::bnet::protocol::EntityId& privileged_account(int index) const;
  inline ::bnet::protocol::EntityId* mutable_privileged_account(int index);
  inline ::bnet::protocol::EntityId* add_privileged_account();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >&
      privileged_account() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >*
      mutable_privileged_account();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.JoinChannelResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 object_id_;
  bool require_friend_validation_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId > privileged_account_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static JoinChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class FindChannelRequest : public ::google::protobuf::Message {
 public:
  FindChannelRequest();
  virtual ~FindChannelRequest();
  
  FindChannelRequest(const FindChannelRequest& from);
  
  inline FindChannelRequest& operator=(const FindChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindChannelRequest& default_instance();
  
  void Swap(FindChannelRequest* other);
  
  // implements Message ----------------------------------------------
  
  FindChannelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindChannelRequest& from);
  void MergeFrom(const FindChannelRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.attribute.AttributeFilter filter = 1;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 1;
  inline const ::bnet::protocol::attribute::AttributeFilter& filter() const;
  inline ::bnet::protocol::attribute::AttributeFilter* mutable_filter();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.FindChannelRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::bnet::protocol::attribute::AttributeFilter* filter_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FindChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class FindChannelResponse : public ::google::protobuf::Message {
 public:
  FindChannelResponse();
  virtual ~FindChannelResponse();
  
  FindChannelResponse(const FindChannelResponse& from);
  
  inline FindChannelResponse& operator=(const FindChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindChannelResponse& default_instance();
  
  void Swap(FindChannelResponse* other);
  
  // implements Message ----------------------------------------------
  
  FindChannelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindChannelResponse& from);
  void MergeFrom(const FindChannelResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.channel.ChannelDescription channel = 1;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline const ::bnet::protocol::channel::ChannelDescription& channel(int index) const;
  inline ::bnet::protocol::channel::ChannelDescription* mutable_channel(int index);
  inline ::bnet::protocol::channel::ChannelDescription* add_channel();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::ChannelDescription >&
      channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::ChannelDescription >*
      mutable_channel();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.FindChannelResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::ChannelDescription > channel_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FindChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChannelState : public ::google::protobuf::Message {
 public:
  ChannelState();
  virtual ~ChannelState();
  
  ChannelState(const ChannelState& from);
  
  inline ChannelState& operator=(const ChannelState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelState& default_instance();
  
  void Swap(ChannelState* other);
  
  // implements Message ----------------------------------------------
  
  ChannelState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelState& from);
  void MergeFrom(const ChannelState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ChannelState_PrivacyLevel PrivacyLevel;
  static const PrivacyLevel PRIVACY_LEVEL_OPEN = ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN;
  static const PrivacyLevel PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND = ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND;
  static const PrivacyLevel PRIVACY_LEVEL_OPEN_INVITATION = ChannelState_PrivacyLevel_PRIVACY_LEVEL_OPEN_INVITATION;
  static const PrivacyLevel PRIVACY_LEVEL_CLOSED = ChannelState_PrivacyLevel_PRIVACY_LEVEL_CLOSED;
  static inline bool PrivacyLevel_IsValid(int value) {
    return ChannelState_PrivacyLevel_IsValid(value);
  }
  static const PrivacyLevel PrivacyLevel_MIN =
    ChannelState_PrivacyLevel_PrivacyLevel_MIN;
  static const PrivacyLevel PrivacyLevel_MAX =
    ChannelState_PrivacyLevel_PrivacyLevel_MAX;
  static const int PrivacyLevel_ARRAYSIZE =
    ChannelState_PrivacyLevel_PrivacyLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PrivacyLevel_descriptor() {
    return ChannelState_PrivacyLevel_descriptor();
  }
  static inline const ::std::string& PrivacyLevel_Name(PrivacyLevel value) {
    return ChannelState_PrivacyLevel_Name(value);
  }
  static inline bool PrivacyLevel_Parse(const ::std::string& name,
      PrivacyLevel* value) {
    return ChannelState_PrivacyLevel_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional uint32 max_members = 1;
  inline bool has_max_members() const;
  inline void clear_max_members();
  static const int kMaxMembersFieldNumber = 1;
  inline ::google::protobuf::uint32 max_members() const;
  inline void set_max_members(::google::protobuf::uint32 value);
  
  // optional uint32 min_members = 2;
  inline bool has_min_members() const;
  inline void clear_min_members();
  static const int kMinMembersFieldNumber = 2;
  inline ::google::protobuf::uint32 min_members() const;
  inline void set_min_members(::google::protobuf::uint32 value);
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // repeated .bnet.protocol.invitation.Invitation invitation = 4;
  inline int invitation_size() const;
  inline void clear_invitation();
  static const int kInvitationFieldNumber = 4;
  inline const ::bnet::protocol::invitation::Invitation& invitation(int index) const;
  inline ::bnet::protocol::invitation::Invitation* mutable_invitation(int index);
  inline ::bnet::protocol::invitation::Invitation* add_invitation();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::invitation::Invitation >&
      invitation() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::invitation::Invitation >*
      mutable_invitation();
  
  // optional uint32 max_invitations = 5;
  inline bool has_max_invitations() const;
  inline void clear_max_invitations();
  static const int kMaxInvitationsFieldNumber = 5;
  inline ::google::protobuf::uint32 max_invitations() const;
  inline void set_max_invitations(::google::protobuf::uint32 value);
  
  // optional uint32 reason = 6;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 6;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);
  
  // optional .bnet.protocol.channel.ChannelState.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_OPEN];
  inline bool has_privacy_level() const;
  inline void clear_privacy_level();
  static const int kPrivacyLevelFieldNumber = 7;
  inline ::bnet::protocol::channel::ChannelState_PrivacyLevel privacy_level() const;
  inline void set_privacy_level(::bnet::protocol::channel::ChannelState_PrivacyLevel value);
  
  // optional bool public = 8;
  inline bool has_public_() const;
  inline void clear_public_();
  static const int kPublicFieldNumber = 8;
  inline bool public_() const;
  inline void set_public_(bool value);
  
  // optional string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string delegate_name = 10;
  inline bool has_delegate_name() const;
  inline void clear_delegate_name();
  static const int kDelegateNameFieldNumber = 10;
  inline const ::std::string& delegate_name() const;
  inline void set_delegate_name(const ::std::string& value);
  inline void set_delegate_name(const char* value);
  inline void set_delegate_name(const char* value, size_t size);
  inline ::std::string* mutable_delegate_name();
  
  // optional string channel_type = 11 [default = "default"];
  inline bool has_channel_type() const;
  inline void clear_channel_type();
  static const int kChannelTypeFieldNumber = 11;
  inline const ::std::string& channel_type() const;
  inline void set_channel_type(const ::std::string& value);
  inline void set_channel_type(const char* value);
  inline void set_channel_type(const char* value, size_t size);
  inline ::std::string* mutable_channel_type();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ChannelState)
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.ChannelState)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 max_members_;
  ::google::protobuf::uint32 min_members_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::invitation::Invitation > invitation_;
  ::google::protobuf::uint32 max_invitations_;
  ::google::protobuf::uint32 reason_;
  int privacy_level_;
  bool public__;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* delegate_name_;
  static const ::std::string _default_delegate_name_;
  ::std::string* channel_type_;
  static const ::std::string _default_channel_type_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ChannelState* default_instance_;
};
// -------------------------------------------------------------------

class MemberState : public ::google::protobuf::Message {
 public:
  MemberState();
  virtual ~MemberState();
  
  MemberState(const MemberState& from);
  
  inline MemberState& operator=(const MemberState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberState& default_instance();
  
  void Swap(MemberState* other);
  
  // implements Message ----------------------------------------------
  
  MemberState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemberState& from);
  void MergeFrom(const MemberState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::bnet::protocol::attribute::Attribute& attribute(int index) const;
  inline ::bnet::protocol::attribute::Attribute* mutable_attribute(int index);
  inline ::bnet::protocol::attribute::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
      mutable_attribute();
  
  // repeated uint32 role = 2;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline ::google::protobuf::uint32 role(int index) const;
  inline void set_role(int index, ::google::protobuf::uint32 value);
  inline void add_role(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role();
  
  // optional uint64 privileges = 3 [default = 0];
  inline bool has_privileges() const;
  inline void clear_privileges();
  static const int kPrivilegesFieldNumber = 3;
  inline ::google::protobuf::uint64 privileges() const;
  inline void set_privileges(::google::protobuf::uint64 value);
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(MemberState)
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.MemberState)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute > attribute_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_;
  ::google::protobuf::uint64 privileges_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MemberState* default_instance_;
};
// -------------------------------------------------------------------

class Member : public ::google::protobuf::Message {
 public:
  Member();
  virtual ~Member();
  
  Member(const Member& from);
  
  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Member& default_instance();
  
  void Swap(Member* other);
  
  // implements Message ----------------------------------------------
  
  Member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Member& from);
  void MergeFrom(const Member& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .bnet.protocol.Identity identity = 1;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 1;
  inline const ::bnet::protocol::Identity& identity() const;
  inline ::bnet::protocol::Identity* mutable_identity();
  
  // required .bnet.protocol.channel.MemberState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::bnet::protocol::channel::MemberState& state() const;
  inline ::bnet::protocol::channel::MemberState* mutable_state();
  
  // @@protoc_insertion_point(class_scope:bnet.protocol.channel.Member)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::bnet::protocol::Identity* identity_;
  ::bnet::protocol::channel::MemberState* state_;
  friend void  protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchannel_2fchannel_5ftypes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Member* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// repeated .bnet.protocol.attribute.Attribute attribute = 1;
inline int Message::attribute_size() const {
  return attribute_.size();
}
inline void Message::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& Message::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* Message::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* Message::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
Message::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
Message::mutable_attribute() {
  return &attribute_;
}

// optional uint32 role = 2;
inline bool Message::has_role() const {
  return _has_bit(1);
}
inline void Message::clear_role() {
  role_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Message::role() const {
  return role_;
}
inline void Message::set_role(::google::protobuf::uint32 value) {
  _set_bit(1);
  role_ = value;
}

// -------------------------------------------------------------------

// ChannelDescription

// required .bnet.protocol.EntityId channel_id = 1;
inline bool ChannelDescription::has_channel_id() const {
  return _has_bit(0);
}
inline void ChannelDescription::clear_channel_id() {
  if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
  _clear_bit(0);
}
inline const ::bnet::protocol::EntityId& ChannelDescription::channel_id() const {
  return channel_id_ != NULL ? *channel_id_ : *default_instance_->channel_id_;
}
inline ::bnet::protocol::EntityId* ChannelDescription::mutable_channel_id() {
  _set_bit(0);
  if (channel_id_ == NULL) channel_id_ = new ::bnet::protocol::EntityId;
  return channel_id_;
}

// optional uint32 current_members = 2;
inline bool ChannelDescription::has_current_members() const {
  return _has_bit(1);
}
inline void ChannelDescription::clear_current_members() {
  current_members_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ChannelDescription::current_members() const {
  return current_members_;
}
inline void ChannelDescription::set_current_members(::google::protobuf::uint32 value) {
  _set_bit(1);
  current_members_ = value;
}

// optional .bnet.protocol.channel.ChannelState state = 3;
inline bool ChannelDescription::has_state() const {
  return _has_bit(2);
}
inline void ChannelDescription::clear_state() {
  if (state_ != NULL) state_->::bnet::protocol::channel::ChannelState::Clear();
  _clear_bit(2);
}
inline const ::bnet::protocol::channel::ChannelState& ChannelDescription::state() const {
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::bnet::protocol::channel::ChannelState* ChannelDescription::mutable_state() {
  _set_bit(2);
  if (state_ == NULL) state_ = new ::bnet::protocol::channel::ChannelState;
  return state_;
}

// -------------------------------------------------------------------

// ChannelInfo

// required .bnet.protocol.channel.ChannelDescription description = 1;
inline bool ChannelInfo::has_description() const {
  return _has_bit(0);
}
inline void ChannelInfo::clear_description() {
  if (description_ != NULL) description_->::bnet::protocol::channel::ChannelDescription::Clear();
  _clear_bit(0);
}
inline const ::bnet::protocol::channel::ChannelDescription& ChannelInfo::description() const {
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::bnet::protocol::channel::ChannelDescription* ChannelInfo::mutable_description() {
  _set_bit(0);
  if (description_ == NULL) description_ = new ::bnet::protocol::channel::ChannelDescription;
  return description_;
}

// repeated .bnet.protocol.channel.Member member = 2;
inline int ChannelInfo::member_size() const {
  return member_.size();
}
inline void ChannelInfo::clear_member() {
  member_.Clear();
}
inline const ::bnet::protocol::channel::Member& ChannelInfo::member(int index) const {
  return member_.Get(index);
}
inline ::bnet::protocol::channel::Member* ChannelInfo::mutable_member(int index) {
  return member_.Mutable(index);
}
inline ::bnet::protocol::channel::Member* ChannelInfo::add_member() {
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >&
ChannelInfo::member() const {
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::Member >*
ChannelInfo::mutable_member() {
  return &member_;
}

// -------------------------------------------------------------------

// GetChannelInfoRequest

// optional .bnet.protocol.EntityId agent_id = 1;
inline bool GetChannelInfoRequest::has_agent_id() const {
  return _has_bit(0);
}
inline void GetChannelInfoRequest::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
  _clear_bit(0);
}
inline const ::bnet::protocol::EntityId& GetChannelInfoRequest::agent_id() const {
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bnet::protocol::EntityId* GetChannelInfoRequest::mutable_agent_id() {
  _set_bit(0);
  if (agent_id_ == NULL) agent_id_ = new ::bnet::protocol::EntityId;
  return agent_id_;
}

// required .bnet.protocol.EntityId channel_id = 2;
inline bool GetChannelInfoRequest::has_channel_id() const {
  return _has_bit(1);
}
inline void GetChannelInfoRequest::clear_channel_id() {
  if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
  _clear_bit(1);
}
inline const ::bnet::protocol::EntityId& GetChannelInfoRequest::channel_id() const {
  return channel_id_ != NULL ? *channel_id_ : *default_instance_->channel_id_;
}
inline ::bnet::protocol::EntityId* GetChannelInfoRequest::mutable_channel_id() {
  _set_bit(1);
  if (channel_id_ == NULL) channel_id_ = new ::bnet::protocol::EntityId;
  return channel_id_;
}

// -------------------------------------------------------------------

// GetChannelInfoResponse

// optional .bnet.protocol.channel.ChannelInfo channel_info = 1;
inline bool GetChannelInfoResponse::has_channel_info() const {
  return _has_bit(0);
}
inline void GetChannelInfoResponse::clear_channel_info() {
  if (channel_info_ != NULL) channel_info_->::bnet::protocol::channel::ChannelInfo::Clear();
  _clear_bit(0);
}
inline const ::bnet::protocol::channel::ChannelInfo& GetChannelInfoResponse::channel_info() const {
  return channel_info_ != NULL ? *channel_info_ : *default_instance_->channel_info_;
}
inline ::bnet::protocol::channel::ChannelInfo* GetChannelInfoResponse::mutable_channel_info() {
  _set_bit(0);
  if (channel_info_ == NULL) channel_info_ = new ::bnet::protocol::channel::ChannelInfo;
  return channel_info_;
}

// -------------------------------------------------------------------

// GetChannelIdRequest

// -------------------------------------------------------------------

// GetChannelIdResponse

// optional .bnet.protocol.EntityId channel_id = 1;
inline bool GetChannelIdResponse::has_channel_id() const {
  return _has_bit(0);
}
inline void GetChannelIdResponse::clear_channel_id() {
  if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
  _clear_bit(0);
}
inline const ::bnet::protocol::EntityId& GetChannelIdResponse::channel_id() const {
  return channel_id_ != NULL ? *channel_id_ : *default_instance_->channel_id_;
}
inline ::bnet::protocol::EntityId* GetChannelIdResponse::mutable_channel_id() {
  _set_bit(0);
  if (channel_id_ == NULL) channel_id_ = new ::bnet::protocol::EntityId;
  return channel_id_;
}

// -------------------------------------------------------------------

// CreateChannelRequest

// optional .bnet.protocol.Identity agent_identity = 1;
inline bool CreateChannelRequest::has_agent_identity() const {
  return _has_bit(0);
}
inline void CreateChannelRequest::clear_agent_identity() {
  if (agent_identity_ != NULL) agent_identity_->::bnet::protocol::Identity::Clear();
  _clear_bit(0);
}
inline const ::bnet::protocol::Identity& CreateChannelRequest::agent_identity() const {
  return agent_identity_ != NULL ? *agent_identity_ : *default_instance_->agent_identity_;
}
inline ::bnet::protocol::Identity* CreateChannelRequest::mutable_agent_identity() {
  _set_bit(0);
  if (agent_identity_ == NULL) agent_identity_ = new ::bnet::protocol::Identity;
  return agent_identity_;
}

// optional .bnet.protocol.channel.ChannelState state = 2;
inline bool CreateChannelRequest::has_state() const {
  return _has_bit(1);
}
inline void CreateChannelRequest::clear_state() {
  if (state_ != NULL) state_->::bnet::protocol::channel::ChannelState::Clear();
  _clear_bit(1);
}
inline const ::bnet::protocol::channel::ChannelState& CreateChannelRequest::state() const {
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::bnet::protocol::channel::ChannelState* CreateChannelRequest::mutable_state() {
  _set_bit(1);
  if (state_ == NULL) state_ = new ::bnet::protocol::channel::ChannelState;
  return state_;
}

// optional .bnet.protocol.EntityId channel_id = 3;
inline bool CreateChannelRequest::has_channel_id() const {
  return _has_bit(2);
}
inline void CreateChannelRequest::clear_channel_id() {
  if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
  _clear_bit(2);
}
inline const ::bnet::protocol::EntityId& CreateChannelRequest::channel_id() const {
  return channel_id_ != NULL ? *channel_id_ : *default_instance_->channel_id_;
}
inline ::bnet::protocol::EntityId* CreateChannelRequest::mutable_channel_id() {
  _set_bit(2);
  if (channel_id_ == NULL) channel_id_ = new ::bnet::protocol::EntityId;
  return channel_id_;
}

// optional uint64 object_id = 4;
inline bool CreateChannelRequest::has_object_id() const {
  return _has_bit(3);
}
inline void CreateChannelRequest::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 CreateChannelRequest::object_id() const {
  return object_id_;
}
inline void CreateChannelRequest::set_object_id(::google::protobuf::uint64 value) {
  _set_bit(3);
  object_id_ = value;
}

// -------------------------------------------------------------------

// CreateChannelResponse

// required uint64 object_id = 1;
inline bool CreateChannelResponse::has_object_id() const {
  return _has_bit(0);
}
inline void CreateChannelResponse::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 CreateChannelResponse::object_id() const {
  return object_id_;
}
inline void CreateChannelResponse::set_object_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  object_id_ = value;
}

// optional .bnet.protocol.EntityId channel_id = 2;
inline bool CreateChannelResponse::has_channel_id() const {
  return _has_bit(1);
}
inline void CreateChannelResponse::clear_channel_id() {
  if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
  _clear_bit(1);
}
inline const ::bnet::protocol::EntityId& CreateChannelResponse::channel_id() const {
  return channel_id_ != NULL ? *channel_id_ : *default_instance_->channel_id_;
}
inline ::bnet::protocol::EntityId* CreateChannelResponse::mutable_channel_id() {
  _set_bit(1);
  if (channel_id_ == NULL) channel_id_ = new ::bnet::protocol::EntityId;
  return channel_id_;
}

// -------------------------------------------------------------------

// JoinChannelRequest

// optional .bnet.protocol.Identity agent_identity = 1;
inline bool JoinChannelRequest::has_agent_identity() const {
  return _has_bit(0);
}
inline void JoinChannelRequest::clear_agent_identity() {
  if (agent_identity_ != NULL) agent_identity_->::bnet::protocol::Identity::Clear();
  _clear_bit(0);
}
inline const ::bnet::protocol::Identity& JoinChannelRequest::agent_identity() const {
  return agent_identity_ != NULL ? *agent_identity_ : *default_instance_->agent_identity_;
}
inline ::bnet::protocol::Identity* JoinChannelRequest::mutable_agent_identity() {
  _set_bit(0);
  if (agent_identity_ == NULL) agent_identity_ = new ::bnet::protocol::Identity;
  return agent_identity_;
}

// required .bnet.protocol.EntityId channel_id = 2;
inline bool JoinChannelRequest::has_channel_id() const {
  return _has_bit(1);
}
inline void JoinChannelRequest::clear_channel_id() {
  if (channel_id_ != NULL) channel_id_->::bnet::protocol::EntityId::Clear();
  _clear_bit(1);
}
inline const ::bnet::protocol::EntityId& JoinChannelRequest::channel_id() const {
  return channel_id_ != NULL ? *channel_id_ : *default_instance_->channel_id_;
}
inline ::bnet::protocol::EntityId* JoinChannelRequest::mutable_channel_id() {
  _set_bit(1);
  if (channel_id_ == NULL) channel_id_ = new ::bnet::protocol::EntityId;
  return channel_id_;
}

// required uint64 object_id = 3;
inline bool JoinChannelRequest::has_object_id() const {
  return _has_bit(2);
}
inline void JoinChannelRequest::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 JoinChannelRequest::object_id() const {
  return object_id_;
}
inline void JoinChannelRequest::set_object_id(::google::protobuf::uint64 value) {
  _set_bit(2);
  object_id_ = value;
}

// repeated .bnet.protocol.EntityId friend_account_id = 4;
inline int JoinChannelRequest::friend_account_id_size() const {
  return friend_account_id_.size();
}
inline void JoinChannelRequest::clear_friend_account_id() {
  friend_account_id_.Clear();
}
inline const ::bnet::protocol::EntityId& JoinChannelRequest::friend_account_id(int index) const {
  return friend_account_id_.Get(index);
}
inline ::bnet::protocol::EntityId* JoinChannelRequest::mutable_friend_account_id(int index) {
  return friend_account_id_.Mutable(index);
}
inline ::bnet::protocol::EntityId* JoinChannelRequest::add_friend_account_id() {
  return friend_account_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >&
JoinChannelRequest::friend_account_id() const {
  return friend_account_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >*
JoinChannelRequest::mutable_friend_account_id() {
  return &friend_account_id_;
}

// -------------------------------------------------------------------

// JoinChannelResponse

// optional uint64 object_id = 1;
inline bool JoinChannelResponse::has_object_id() const {
  return _has_bit(0);
}
inline void JoinChannelResponse::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 JoinChannelResponse::object_id() const {
  return object_id_;
}
inline void JoinChannelResponse::set_object_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  object_id_ = value;
}

// optional bool require_friend_validation = 2 [default = false];
inline bool JoinChannelResponse::has_require_friend_validation() const {
  return _has_bit(1);
}
inline void JoinChannelResponse::clear_require_friend_validation() {
  require_friend_validation_ = false;
  _clear_bit(1);
}
inline bool JoinChannelResponse::require_friend_validation() const {
  return require_friend_validation_;
}
inline void JoinChannelResponse::set_require_friend_validation(bool value) {
  _set_bit(1);
  require_friend_validation_ = value;
}

// repeated .bnet.protocol.EntityId privileged_account = 3;
inline int JoinChannelResponse::privileged_account_size() const {
  return privileged_account_.size();
}
inline void JoinChannelResponse::clear_privileged_account() {
  privileged_account_.Clear();
}
inline const ::bnet::protocol::EntityId& JoinChannelResponse::privileged_account(int index) const {
  return privileged_account_.Get(index);
}
inline ::bnet::protocol::EntityId* JoinChannelResponse::mutable_privileged_account(int index) {
  return privileged_account_.Mutable(index);
}
inline ::bnet::protocol::EntityId* JoinChannelResponse::add_privileged_account() {
  return privileged_account_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >&
JoinChannelResponse::privileged_account() const {
  return privileged_account_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::EntityId >*
JoinChannelResponse::mutable_privileged_account() {
  return &privileged_account_;
}

// -------------------------------------------------------------------

// FindChannelRequest

// required .bnet.protocol.attribute.AttributeFilter filter = 1;
inline bool FindChannelRequest::has_filter() const {
  return _has_bit(0);
}
inline void FindChannelRequest::clear_filter() {
  if (filter_ != NULL) filter_->::bnet::protocol::attribute::AttributeFilter::Clear();
  _clear_bit(0);
}
inline const ::bnet::protocol::attribute::AttributeFilter& FindChannelRequest::filter() const {
  return filter_ != NULL ? *filter_ : *default_instance_->filter_;
}
inline ::bnet::protocol::attribute::AttributeFilter* FindChannelRequest::mutable_filter() {
  _set_bit(0);
  if (filter_ == NULL) filter_ = new ::bnet::protocol::attribute::AttributeFilter;
  return filter_;
}

// -------------------------------------------------------------------

// FindChannelResponse

// repeated .bnet.protocol.channel.ChannelDescription channel = 1;
inline int FindChannelResponse::channel_size() const {
  return channel_.size();
}
inline void FindChannelResponse::clear_channel() {
  channel_.Clear();
}
inline const ::bnet::protocol::channel::ChannelDescription& FindChannelResponse::channel(int index) const {
  return channel_.Get(index);
}
inline ::bnet::protocol::channel::ChannelDescription* FindChannelResponse::mutable_channel(int index) {
  return channel_.Mutable(index);
}
inline ::bnet::protocol::channel::ChannelDescription* FindChannelResponse::add_channel() {
  return channel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::ChannelDescription >&
FindChannelResponse::channel() const {
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::channel::ChannelDescription >*
FindChannelResponse::mutable_channel() {
  return &channel_;
}

// -------------------------------------------------------------------

// ChannelState

// optional uint32 max_members = 1;
inline bool ChannelState::has_max_members() const {
  return _has_bit(0);
}
inline void ChannelState::clear_max_members() {
  max_members_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 ChannelState::max_members() const {
  return max_members_;
}
inline void ChannelState::set_max_members(::google::protobuf::uint32 value) {
  _set_bit(0);
  max_members_ = value;
}

// optional uint32 min_members = 2;
inline bool ChannelState::has_min_members() const {
  return _has_bit(1);
}
inline void ChannelState::clear_min_members() {
  min_members_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ChannelState::min_members() const {
  return min_members_;
}
inline void ChannelState::set_min_members(::google::protobuf::uint32 value) {
  _set_bit(1);
  min_members_ = value;
}

// repeated .bnet.protocol.attribute.Attribute attribute = 3;
inline int ChannelState::attribute_size() const {
  return attribute_.size();
}
inline void ChannelState::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& ChannelState::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* ChannelState::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* ChannelState::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
ChannelState::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
ChannelState::mutable_attribute() {
  return &attribute_;
}

// repeated .bnet.protocol.invitation.Invitation invitation = 4;
inline int ChannelState::invitation_size() const {
  return invitation_.size();
}
inline void ChannelState::clear_invitation() {
  invitation_.Clear();
}
inline const ::bnet::protocol::invitation::Invitation& ChannelState::invitation(int index) const {
  return invitation_.Get(index);
}
inline ::bnet::protocol::invitation::Invitation* ChannelState::mutable_invitation(int index) {
  return invitation_.Mutable(index);
}
inline ::bnet::protocol::invitation::Invitation* ChannelState::add_invitation() {
  return invitation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::invitation::Invitation >&
ChannelState::invitation() const {
  return invitation_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::invitation::Invitation >*
ChannelState::mutable_invitation() {
  return &invitation_;
}

// optional uint32 max_invitations = 5;
inline bool ChannelState::has_max_invitations() const {
  return _has_bit(4);
}
inline void ChannelState::clear_max_invitations() {
  max_invitations_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 ChannelState::max_invitations() const {
  return max_invitations_;
}
inline void ChannelState::set_max_invitations(::google::protobuf::uint32 value) {
  _set_bit(4);
  max_invitations_ = value;
}

// optional uint32 reason = 6;
inline bool ChannelState::has_reason() const {
  return _has_bit(5);
}
inline void ChannelState::clear_reason() {
  reason_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 ChannelState::reason() const {
  return reason_;
}
inline void ChannelState::set_reason(::google::protobuf::uint32 value) {
  _set_bit(5);
  reason_ = value;
}

// optional .bnet.protocol.channel.ChannelState.PrivacyLevel privacy_level = 7 [default = PRIVACY_LEVEL_OPEN];
inline bool ChannelState::has_privacy_level() const {
  return _has_bit(6);
}
inline void ChannelState::clear_privacy_level() {
  privacy_level_ = 1;
  _clear_bit(6);
}
inline ::bnet::protocol::channel::ChannelState_PrivacyLevel ChannelState::privacy_level() const {
  return static_cast< ::bnet::protocol::channel::ChannelState_PrivacyLevel >(privacy_level_);
}
inline void ChannelState::set_privacy_level(::bnet::protocol::channel::ChannelState_PrivacyLevel value) {
  GOOGLE_DCHECK(::bnet::protocol::channel::ChannelState_PrivacyLevel_IsValid(value));
  _set_bit(6);
  privacy_level_ = value;
}

// optional bool public = 8;
inline bool ChannelState::has_public_() const {
  return _has_bit(7);
}
inline void ChannelState::clear_public_() {
  public__ = false;
  _clear_bit(7);
}
inline bool ChannelState::public_() const {
  return public__;
}
inline void ChannelState::set_public_(bool value) {
  _set_bit(7);
  public__ = value;
}

// optional string name = 9;
inline bool ChannelState::has_name() const {
  return _has_bit(8);
}
inline void ChannelState::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& ChannelState::name() const {
  return *name_;
}
inline void ChannelState::set_name(const ::std::string& value) {
  _set_bit(8);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChannelState::set_name(const char* value) {
  _set_bit(8);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChannelState::set_name(const char* value, size_t size) {
  _set_bit(8);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChannelState::mutable_name() {
  _set_bit(8);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string delegate_name = 10;
inline bool ChannelState::has_delegate_name() const {
  return _has_bit(9);
}
inline void ChannelState::clear_delegate_name() {
  if (delegate_name_ != &_default_delegate_name_) {
    delegate_name_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& ChannelState::delegate_name() const {
  return *delegate_name_;
}
inline void ChannelState::set_delegate_name(const ::std::string& value) {
  _set_bit(9);
  if (delegate_name_ == &_default_delegate_name_) {
    delegate_name_ = new ::std::string;
  }
  delegate_name_->assign(value);
}
inline void ChannelState::set_delegate_name(const char* value) {
  _set_bit(9);
  if (delegate_name_ == &_default_delegate_name_) {
    delegate_name_ = new ::std::string;
  }
  delegate_name_->assign(value);
}
inline void ChannelState::set_delegate_name(const char* value, size_t size) {
  _set_bit(9);
  if (delegate_name_ == &_default_delegate_name_) {
    delegate_name_ = new ::std::string;
  }
  delegate_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChannelState::mutable_delegate_name() {
  _set_bit(9);
  if (delegate_name_ == &_default_delegate_name_) {
    delegate_name_ = new ::std::string;
  }
  return delegate_name_;
}

// optional string channel_type = 11 [default = "default"];
inline bool ChannelState::has_channel_type() const {
  return _has_bit(10);
}
inline void ChannelState::clear_channel_type() {
  if (channel_type_ != &_default_channel_type_) {
    channel_type_->assign(_default_channel_type_);
  }
  _clear_bit(10);
}
inline const ::std::string& ChannelState::channel_type() const {
  return *channel_type_;
}
inline void ChannelState::set_channel_type(const ::std::string& value) {
  _set_bit(10);
  if (channel_type_ == &_default_channel_type_) {
    channel_type_ = new ::std::string;
  }
  channel_type_->assign(value);
}
inline void ChannelState::set_channel_type(const char* value) {
  _set_bit(10);
  if (channel_type_ == &_default_channel_type_) {
    channel_type_ = new ::std::string;
  }
  channel_type_->assign(value);
}
inline void ChannelState::set_channel_type(const char* value, size_t size) {
  _set_bit(10);
  if (channel_type_ == &_default_channel_type_) {
    channel_type_ = new ::std::string;
  }
  channel_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChannelState::mutable_channel_type() {
  _set_bit(10);
  if (channel_type_ == &_default_channel_type_) {
    channel_type_ = new ::std::string(_default_channel_type_);
  }
  return channel_type_;
}

// -------------------------------------------------------------------

// MemberState

// repeated .bnet.protocol.attribute.Attribute attribute = 1;
inline int MemberState::attribute_size() const {
  return attribute_.size();
}
inline void MemberState::clear_attribute() {
  attribute_.Clear();
}
inline const ::bnet::protocol::attribute::Attribute& MemberState::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::bnet::protocol::attribute::Attribute* MemberState::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::bnet::protocol::attribute::Attribute* MemberState::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >&
MemberState::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bnet::protocol::attribute::Attribute >*
MemberState::mutable_attribute() {
  return &attribute_;
}

// repeated uint32 role = 2;
inline int MemberState::role_size() const {
  return role_.size();
}
inline void MemberState::clear_role() {
  role_.Clear();
}
inline ::google::protobuf::uint32 MemberState::role(int index) const {
  return role_.Get(index);
}
inline void MemberState::set_role(int index, ::google::protobuf::uint32 value) {
  role_.Set(index, value);
}
inline void MemberState::add_role(::google::protobuf::uint32 value) {
  role_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MemberState::role() const {
  return role_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MemberState::mutable_role() {
  return &role_;
}

// optional uint64 privileges = 3 [default = 0];
inline bool MemberState::has_privileges() const {
  return _has_bit(2);
}
inline void MemberState::clear_privileges() {
  privileges_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 MemberState::privileges() const {
  return privileges_;
}
inline void MemberState::set_privileges(::google::protobuf::uint64 value) {
  _set_bit(2);
  privileges_ = value;
}

// -------------------------------------------------------------------

// Member

// required .bnet.protocol.Identity identity = 1;
inline bool Member::has_identity() const {
  return _has_bit(0);
}
inline void Member::clear_identity() {
  if (identity_ != NULL) identity_->::bnet::protocol::Identity::Clear();
  _clear_bit(0);
}
inline const ::bnet::protocol::Identity& Member::identity() const {
  return identity_ != NULL ? *identity_ : *default_instance_->identity_;
}
inline ::bnet::protocol::Identity* Member::mutable_identity() {
  _set_bit(0);
  if (identity_ == NULL) identity_ = new ::bnet::protocol::Identity;
  return identity_;
}

// required .bnet.protocol.channel.MemberState state = 2;
inline bool Member::has_state() const {
  return _has_bit(1);
}
inline void Member::clear_state() {
  if (state_ != NULL) state_->::bnet::protocol::channel::MemberState::Clear();
  _clear_bit(1);
}
inline const ::bnet::protocol::channel::MemberState& Member::state() const {
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::bnet::protocol::channel::MemberState* Member::mutable_state() {
  _set_bit(1);
  if (state_ == NULL) state_ = new ::bnet::protocol::channel::MemberState;
  return state_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bnet::protocol::channel::ChannelState_PrivacyLevel>() {
  return ::bnet::protocol::channel::ChannelState_PrivacyLevel_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2fchannel_2fchannel_5ftypes_2eproto__INCLUDED
