// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/friends/definition/friends.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace friends {

namespace {

const ::google::protobuf::Descriptor* SubscribeToFriendsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeToFriendsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeToFriendsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeToFriendsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeToFriendsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeToFriendsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendInvitationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendInvitationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewFriendsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewFriendsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewFriendsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewFriendsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFriendStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFriendStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitationAddedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitationAddedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitationRemovedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitationRemovedNotification_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* FriendsService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* FriendsNotify_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2ffriends_2fdefinition_2ffriends_2eproto() {
  protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/friends/definition/friends.proto");
  GOOGLE_CHECK(file != NULL);
  SubscribeToFriendsRequest_descriptor_ = file->message_type(0);
  static const int SubscribeToFriendsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsRequest, object_id_),
  };
  SubscribeToFriendsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeToFriendsRequest_descriptor_,
      SubscribeToFriendsRequest::default_instance_,
      SubscribeToFriendsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeToFriendsRequest));
  SubscribeToFriendsResponse_descriptor_ = file->message_type(1);
  static const int SubscribeToFriendsResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsResponse, max_friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsResponse, max_received_invitations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsResponse, max_sent_invitations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsResponse, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsResponse, sent_invitations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsResponse, received_invitations_),
  };
  SubscribeToFriendsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeToFriendsResponse_descriptor_,
      SubscribeToFriendsResponse::default_instance_,
      SubscribeToFriendsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToFriendsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeToFriendsResponse));
  UnsubscribeToFriendsRequest_descriptor_ = file->message_type(2);
  static const int UnsubscribeToFriendsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeToFriendsRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeToFriendsRequest, object_id_),
  };
  UnsubscribeToFriendsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeToFriendsRequest_descriptor_,
      UnsubscribeToFriendsRequest::default_instance_,
      UnsubscribeToFriendsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeToFriendsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeToFriendsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeToFriendsRequest));
  GenericFriendRequest_descriptor_ = file->message_type(3);
  static const int GenericFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendRequest, target_id_),
  };
  GenericFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericFriendRequest_descriptor_,
      GenericFriendRequest::default_instance_,
      GenericFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericFriendRequest));
  GenericFriendResponse_descriptor_ = file->message_type(4);
  static const int GenericFriendResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendResponse, target_friend_),
  };
  GenericFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericFriendResponse_descriptor_,
      GenericFriendResponse::default_instance_,
      GenericFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericFriendResponse));
  SendInvitationRequest_descriptor_ = file->message_type(5);
  static const int SendInvitationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, target_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, display_string_),
  };
  SendInvitationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendInvitationRequest_descriptor_,
      SendInvitationRequest::default_instance_,
      SendInvitationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendInvitationRequest));
  ViewFriendsRequest_descriptor_ = file->message_type(6);
  static const int ViewFriendsRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, max_results_),
  };
  ViewFriendsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewFriendsRequest_descriptor_,
      ViewFriendsRequest::default_instance_,
      ViewFriendsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewFriendsRequest));
  ViewFriendsResponse_descriptor_ = file->message_type(7);
  static const int ViewFriendsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsResponse, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsResponse, total_results_),
  };
  ViewFriendsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewFriendsResponse_descriptor_,
      ViewFriendsResponse::default_instance_,
      ViewFriendsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewFriendsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewFriendsResponse));
  UpdateFriendStateRequest_descriptor_ = file->message_type(8);
  static const int UpdateFriendStateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, attribute_),
  };
  UpdateFriendStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendStateRequest_descriptor_,
      UpdateFriendStateRequest::default_instance_,
      UpdateFriendStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendStateRequest));
  UpdateFriendStateResponse_descriptor_ = file->message_type(9);
  static const int UpdateFriendStateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateResponse, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateResponse, attribute_),
  };
  UpdateFriendStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFriendStateResponse_descriptor_,
      UpdateFriendStateResponse::default_instance_,
      UpdateFriendStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFriendStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFriendStateResponse));
  FriendNotification_descriptor_ = file->message_type(10);
  static const int FriendNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendNotification, target_),
  };
  FriendNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendNotification_descriptor_,
      FriendNotification::default_instance_,
      FriendNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendNotification));
  InvitationAddedNotification_descriptor_ = file->message_type(11);
  static const int InvitationAddedNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAddedNotification, invitation_),
  };
  InvitationAddedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitationAddedNotification_descriptor_,
      InvitationAddedNotification::default_instance_,
      InvitationAddedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAddedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAddedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitationAddedNotification));
  InvitationRemovedNotification_descriptor_ = file->message_type(12);
  static const int InvitationRemovedNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRemovedNotification, invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRemovedNotification, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRemovedNotification, added_friend_),
  };
  InvitationRemovedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitationRemovedNotification_descriptor_,
      InvitationRemovedNotification::default_instance_,
      InvitationRemovedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRemovedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRemovedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitationRemovedNotification));
  FriendsService_descriptor_ = file->service(0);
  FriendsNotify_descriptor_ = file->service(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2ffriends_2fdefinition_2ffriends_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeToFriendsRequest_descriptor_, &SubscribeToFriendsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeToFriendsResponse_descriptor_, &SubscribeToFriendsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeToFriendsRequest_descriptor_, &UnsubscribeToFriendsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericFriendRequest_descriptor_, &GenericFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericFriendResponse_descriptor_, &GenericFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendInvitationRequest_descriptor_, &SendInvitationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewFriendsRequest_descriptor_, &ViewFriendsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewFriendsResponse_descriptor_, &ViewFriendsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendStateRequest_descriptor_, &UpdateFriendStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFriendStateResponse_descriptor_, &UpdateFriendStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendNotification_descriptor_, &FriendNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitationAddedNotification_descriptor_, &InvitationAddedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitationRemovedNotification_descriptor_, &InvitationRemovedNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2ffriends_2fdefinition_2ffriends_2eproto() {
  delete SubscribeToFriendsRequest::default_instance_;
  delete SubscribeToFriendsRequest_reflection_;
  delete SubscribeToFriendsResponse::default_instance_;
  delete SubscribeToFriendsResponse_reflection_;
  delete UnsubscribeToFriendsRequest::default_instance_;
  delete UnsubscribeToFriendsRequest_reflection_;
  delete GenericFriendRequest::default_instance_;
  delete GenericFriendRequest_reflection_;
  delete GenericFriendResponse::default_instance_;
  delete GenericFriendResponse_reflection_;
  delete SendInvitationRequest::default_instance_;
  delete SendInvitationRequest_reflection_;
  delete ViewFriendsRequest::default_instance_;
  delete ViewFriendsRequest_reflection_;
  delete ViewFriendsResponse::default_instance_;
  delete ViewFriendsResponse_reflection_;
  delete UpdateFriendStateRequest::default_instance_;
  delete UpdateFriendStateRequest_reflection_;
  delete UpdateFriendStateResponse::default_instance_;
  delete UpdateFriendStateResponse_reflection_;
  delete FriendNotification::default_instance_;
  delete FriendNotification_reflection_;
  delete InvitationAddedNotification::default_instance_;
  delete InvitationAddedNotification_reflection_;
  delete InvitationRemovedNotification::default_instance_;
  delete InvitationRemovedNotification_reflection_;
}

void protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::invitation::protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::bnet::protocol::friends::protobuf_AddDesc_service_2ffriends_2ffriends_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(service/friends/definition/friends.pro"
    "to\022\025bnet.protocol.friends\032\034lib/protocol/"
    "attribute.proto\032\031lib/protocol/entity.pro"
    "to\032\035lib/protocol/invitation.proto\032\021lib/r"
    "pc/rpc.proto\032#service/friends/friends_ty"
    "pes.proto\"Y\n\031SubscribeToFriendsRequest\022)"
    "\n\010agent_id\030\001 \001(\0132\027.bnet.protocol.EntityI"
    "d\022\021\n\tobject_id\030\002 \002(\004\"\245\002\n\032SubscribeToFrie"
    "ndsResponse\022\023\n\013max_friends\030\002 \001(\r\022 \n\030max_"
    "received_invitations\030\003 \001(\r\022\034\n\024max_sent_i"
    "nvitations\030\004 \001(\r\022.\n\007friends\030\005 \003(\0132\035.bnet"
    ".protocol.friends.Friend\022>\n\020sent_invitat"
    "ions\030\006 \003(\0132$.bnet.protocol.invitation.In"
    "vitation\022B\n\024received_invitations\030\007 \003(\0132$"
    ".bnet.protocol.invitation.Invitation\"[\n\033"
    "UnsubscribeToFriendsRequest\022)\n\010agent_id\030"
    "\001 \001(\0132\027.bnet.protocol.EntityId\022\021\n\tobject"
    "_id\030\002 \001(\004\"m\n\024GenericFriendRequest\022)\n\010age"
    "nt_id\030\001 \001(\0132\027.bnet.protocol.EntityId\022*\n\t"
    "target_id\030\002 \002(\0132\027.bnet.protocol.EntityId"
    "\"M\n\025GenericFriendResponse\0224\n\rtarget_frie"
    "nd\030\002 \001(\0132\035.bnet.protocol.friends.Friend\""
    "\274\001\n\025SendInvitationRequest\022\024\n\014target_emai"
    "l\030\003 \001(\t\022\026\n\016display_string\030\004 \001(\t2u\n\016frien"
    "d_request\022/.bnet.protocol.invitation.Sen"
    "dInvitationRequest\030g \001(\0132,.bnet.protocol"
    ".friends.SendInvitationRequest\"\327\001\n\022ViewF"
    "riendsRequest\022)\n\010agent_id\030\001 \001(\0132\027.bnet.p"
    "rotocol.EntityId\022*\n\ttarget_id\030\002 \002(\0132\027.bn"
    "et.protocol.EntityId\0228\n\006filter\030\003 \002(\0132(.b"
    "net.protocol.attribute.AttributeFilter\022\026"
    "\n\013start_index\030\004 \001(\r:\0010\022\030\n\013max_results\030\005 "
    "\001(\r:\003100\"\\\n\023ViewFriendsResponse\022.\n\007frien"
    "ds\030\001 \003(\0132\035.bnet.protocol.friends.Friend\022"
    "\025\n\rtotal_results\030\002 \001(\r\"\250\001\n\030UpdateFriendS"
    "tateRequest\022)\n\010agent_id\030\001 \001(\0132\027.bnet.pro"
    "tocol.EntityId\022*\n\ttarget_id\030\002 \002(\0132\027.bnet"
    ".protocol.EntityId\0225\n\tattribute\030\003 \003(\0132\"."
    "bnet.protocol.attribute.Attribute\"~\n\031Upd"
    "ateFriendStateResponse\022*\n\ttarget_id\030\002 \002("
    "\0132\027.bnet.protocol.EntityId\0225\n\tattribute\030"
    "\003 \003(\0132\".bnet.protocol.attribute.Attribut"
    "e\"C\n\022FriendNotification\022-\n\006target\030\001 \002(\0132"
    "\035.bnet.protocol.friends.Friend\"W\n\033Invita"
    "tionAddedNotification\0228\n\ninvitation\030\001 \002("
    "\0132$.bnet.protocol.invitation.Invitation\""
    "\236\001\n\035InvitationRemovedNotification\0228\n\ninv"
    "itation\030\001 \002(\0132$.bnet.protocol.invitation"
    ".Invitation\022\016\n\006reason\030\002 \001(\r\0223\n\014added_fri"
    "end\030\003 \001(\0132\035.bnet.protocol.friends.Friend"
    "2\201\010\n\016FriendsService\022y\n\022SubscribeToFriend"
    "s\0220.bnet.protocol.friends.SubscribeToFri"
    "endsRequest\0321.bnet.protocol.friends.Subs"
    "cribeToFriendsResponse\022s\n\016SendInvitation"
    "\022/.bnet.protocol.invitation.SendInvitati"
    "onRequest\0320.bnet.protocol.invitation.Sen"
    "dInvitationResponse\022S\n\020AcceptInvitation\022"
    "(.bnet.protocol.invitation.GenericReques"
    "t\032\025.bnet.protocol.NoData\022S\n\020RevokeInvita"
    "tion\022(.bnet.protocol.invitation.GenericR"
    "equest\032\025.bnet.protocol.NoData\022T\n\021Decline"
    "Invitation\022(.bnet.protocol.invitation.Ge"
    "nericRequest\032\025.bnet.protocol.NoData\022S\n\020I"
    "gnoreInvitation\022(.bnet.protocol.invitati"
    "on.GenericRequest\032\025.bnet.protocol.NoData"
    "\022i\n\014RemoveFriend\022+.bnet.protocol.friends"
    ".GenericFriendRequest\032,.bnet.protocol.fr"
    "iends.GenericFriendResponse\022d\n\013ViewFrien"
    "ds\022).bnet.protocol.friends.ViewFriendsRe"
    "quest\032*.bnet.protocol.friends.ViewFriend"
    "sResponse\022v\n\021UpdateFriendState\022/.bnet.pr"
    "otocol.friends.UpdateFriendStateRequest\032"
    "0.bnet.protocol.friends.UpdateFriendStat"
    "eResponse\022a\n\024UnsubscribeToFriends\0222.bnet"
    ".protocol.friends.UnsubscribeToFriendsRe"
    "quest\032\025.bnet.protocol.NoData2\240\004\n\rFriends"
    "Notify\022Z\n\021NotifyFriendAdded\022).bnet.proto"
    "col.friends.FriendNotification\032\032.bnet.pr"
    "otocol.NO_RESPONSE\022\\\n\023NotifyFriendRemove"
    "d\022).bnet.protocol.friends.FriendNotifica"
    "tion\032\032.bnet.protocol.NO_RESPONSE\022o\n\035Noti"
    "fyReceivedInvitationAdded\0222.bnet.protoco"
    "l.friends.InvitationAddedNotification\032\032."
    "bnet.protocol.NO_RESPONSE\022s\n\037NotifyRecei"
    "vedInvitationRemoved\0224.bnet.protocol.fri"
    "ends.InvitationRemovedNotification\032\032.bne"
    "t.protocol.NO_RESPONSE\022o\n\033NotifySentInvi"
    "tationRemoved\0224.bnet.protocol.friends.In"
    "vitationRemovedNotification\032\032.bnet.proto"
    "col.NO_RESPONSEB\003\200\001\001", 3580);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/friends/definition/friends.proto", &protobuf_RegisterTypes);
  SubscribeToFriendsRequest::default_instance_ = new SubscribeToFriendsRequest();
  SubscribeToFriendsResponse::default_instance_ = new SubscribeToFriendsResponse();
  UnsubscribeToFriendsRequest::default_instance_ = new UnsubscribeToFriendsRequest();
  GenericFriendRequest::default_instance_ = new GenericFriendRequest();
  GenericFriendResponse::default_instance_ = new GenericFriendResponse();
  SendInvitationRequest::default_instance_ = new SendInvitationRequest();
  ViewFriendsRequest::default_instance_ = new ViewFriendsRequest();
  ViewFriendsResponse::default_instance_ = new ViewFriendsResponse();
  UpdateFriendStateRequest::default_instance_ = new UpdateFriendStateRequest();
  UpdateFriendStateResponse::default_instance_ = new UpdateFriendStateResponse();
  FriendNotification::default_instance_ = new FriendNotification();
  InvitationAddedNotification::default_instance_ = new InvitationAddedNotification();
  InvitationRemovedNotification::default_instance_ = new InvitationRemovedNotification();
  SubscribeToFriendsRequest::default_instance_->InitAsDefaultInstance();
  SubscribeToFriendsResponse::default_instance_->InitAsDefaultInstance();
  UnsubscribeToFriendsRequest::default_instance_->InitAsDefaultInstance();
  GenericFriendRequest::default_instance_->InitAsDefaultInstance();
  GenericFriendResponse::default_instance_->InitAsDefaultInstance();
  SendInvitationRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::bnet::protocol::invitation::SendInvitationRequest::default_instance(),
    103, 11, false, false,
    &::bnet::protocol::friends::SendInvitationRequest::default_instance());
  ViewFriendsRequest::default_instance_->InitAsDefaultInstance();
  ViewFriendsResponse::default_instance_->InitAsDefaultInstance();
  UpdateFriendStateRequest::default_instance_->InitAsDefaultInstance();
  UpdateFriendStateResponse::default_instance_->InitAsDefaultInstance();
  FriendNotification::default_instance_->InitAsDefaultInstance();
  InvitationAddedNotification::default_instance_->InitAsDefaultInstance();
  InvitationRemovedNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2ffriends_2fdefinition_2ffriends_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2ffriends_2fdefinition_2ffriends_2eproto {
  StaticDescriptorInitializer_service_2ffriends_2fdefinition_2ffriends_2eproto() {
    protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();
  }
} static_descriptor_initializer_service_2ffriends_2fdefinition_2ffriends_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SubscribeToFriendsRequest::kAgentIdFieldNumber;
const int SubscribeToFriendsRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

SubscribeToFriendsRequest::SubscribeToFriendsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeToFriendsRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

SubscribeToFriendsRequest::SubscribeToFriendsRequest(const SubscribeToFriendsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeToFriendsRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeToFriendsRequest::~SubscribeToFriendsRequest() {
  SharedDtor();
}

void SubscribeToFriendsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void SubscribeToFriendsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeToFriendsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeToFriendsRequest_descriptor_;
}

const SubscribeToFriendsRequest& SubscribeToFriendsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

SubscribeToFriendsRequest* SubscribeToFriendsRequest::default_instance_ = NULL;

SubscribeToFriendsRequest* SubscribeToFriendsRequest::New() const {
  return new SubscribeToFriendsRequest;
}

void SubscribeToFriendsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeToFriendsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_id;
        break;
      }
      
      // required uint64 object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeToFriendsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required uint64 object_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeToFriendsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required uint64 object_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeToFriendsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required uint64 object_id = 2;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeToFriendsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeToFriendsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeToFriendsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeToFriendsRequest::MergeFrom(const SubscribeToFriendsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeToFriendsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeToFriendsRequest::CopyFrom(const SubscribeToFriendsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeToFriendsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void SubscribeToFriendsRequest::Swap(SubscribeToFriendsRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeToFriendsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeToFriendsRequest_descriptor_;
  metadata.reflection = SubscribeToFriendsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeToFriendsResponse::kMaxFriendsFieldNumber;
const int SubscribeToFriendsResponse::kMaxReceivedInvitationsFieldNumber;
const int SubscribeToFriendsResponse::kMaxSentInvitationsFieldNumber;
const int SubscribeToFriendsResponse::kFriendsFieldNumber;
const int SubscribeToFriendsResponse::kSentInvitationsFieldNumber;
const int SubscribeToFriendsResponse::kReceivedInvitationsFieldNumber;
#endif  // !_MSC_VER

SubscribeToFriendsResponse::SubscribeToFriendsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeToFriendsResponse::InitAsDefaultInstance() {
}

SubscribeToFriendsResponse::SubscribeToFriendsResponse(const SubscribeToFriendsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeToFriendsResponse::SharedCtor() {
  _cached_size_ = 0;
  max_friends_ = 0u;
  max_received_invitations_ = 0u;
  max_sent_invitations_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeToFriendsResponse::~SubscribeToFriendsResponse() {
  SharedDtor();
}

void SubscribeToFriendsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeToFriendsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeToFriendsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeToFriendsResponse_descriptor_;
}

const SubscribeToFriendsResponse& SubscribeToFriendsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

SubscribeToFriendsResponse* SubscribeToFriendsResponse::default_instance_ = NULL;

SubscribeToFriendsResponse* SubscribeToFriendsResponse::New() const {
  return new SubscribeToFriendsResponse;
}

void SubscribeToFriendsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_friends_ = 0u;
    max_received_invitations_ = 0u;
    max_sent_invitations_ = 0u;
  }
  friends_.Clear();
  sent_invitations_.Clear();
  received_invitations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeToFriendsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_friends_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_received_invitations;
        break;
      }
      
      // optional uint32 max_received_invitations = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_received_invitations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_received_invitations_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_sent_invitations;
        break;
      }
      
      // optional uint32 max_sent_invitations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_sent_invitations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_sent_invitations_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_friends;
        break;
      }
      
      // repeated .bnet.protocol.friends.Friend friends = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_friends;
        if (input->ExpectTag(50)) goto parse_sent_invitations;
        break;
      }
      
      // repeated .bnet.protocol.invitation.Invitation sent_invitations = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sent_invitations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sent_invitations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sent_invitations;
        if (input->ExpectTag(58)) goto parse_received_invitations;
        break;
      }
      
      // repeated .bnet.protocol.invitation.Invitation received_invitations = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_received_invitations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_received_invitations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_received_invitations;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeToFriendsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 max_friends = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_friends(), output);
  }
  
  // optional uint32 max_received_invitations = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_received_invitations(), output);
  }
  
  // optional uint32 max_sent_invitations = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_sent_invitations(), output);
  }
  
  // repeated .bnet.protocol.friends.Friend friends = 5;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->friends(i), output);
  }
  
  // repeated .bnet.protocol.invitation.Invitation sent_invitations = 6;
  for (int i = 0; i < this->sent_invitations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sent_invitations(i), output);
  }
  
  // repeated .bnet.protocol.invitation.Invitation received_invitations = 7;
  for (int i = 0; i < this->received_invitations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->received_invitations(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeToFriendsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 max_friends = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_friends(), target);
  }
  
  // optional uint32 max_received_invitations = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_received_invitations(), target);
  }
  
  // optional uint32 max_sent_invitations = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_sent_invitations(), target);
  }
  
  // repeated .bnet.protocol.friends.Friend friends = 5;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->friends(i), target);
  }
  
  // repeated .bnet.protocol.invitation.Invitation sent_invitations = 6;
  for (int i = 0; i < this->sent_invitations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sent_invitations(i), target);
  }
  
  // repeated .bnet.protocol.invitation.Invitation received_invitations = 7;
  for (int i = 0; i < this->received_invitations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->received_invitations(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeToFriendsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_friends = 2;
    if (has_max_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_friends());
    }
    
    // optional uint32 max_received_invitations = 3;
    if (has_max_received_invitations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_received_invitations());
    }
    
    // optional uint32 max_sent_invitations = 4;
    if (has_max_sent_invitations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_sent_invitations());
    }
    
  }
  // repeated .bnet.protocol.friends.Friend friends = 5;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  // repeated .bnet.protocol.invitation.Invitation sent_invitations = 6;
  total_size += 1 * this->sent_invitations_size();
  for (int i = 0; i < this->sent_invitations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sent_invitations(i));
  }
  
  // repeated .bnet.protocol.invitation.Invitation received_invitations = 7;
  total_size += 1 * this->received_invitations_size();
  for (int i = 0; i < this->received_invitations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->received_invitations(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeToFriendsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeToFriendsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeToFriendsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeToFriendsResponse::MergeFrom(const SubscribeToFriendsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  sent_invitations_.MergeFrom(from.sent_invitations_);
  received_invitations_.MergeFrom(from.received_invitations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_max_friends(from.max_friends());
    }
    if (from._has_bit(1)) {
      set_max_received_invitations(from.max_received_invitations());
    }
    if (from._has_bit(2)) {
      set_max_sent_invitations(from.max_sent_invitations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeToFriendsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeToFriendsResponse::CopyFrom(const SubscribeToFriendsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeToFriendsResponse::IsInitialized() const {
  
  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sent_invitations_size(); i++) {
    if (!this->sent_invitations(i).IsInitialized()) return false;
  }
  for (int i = 0; i < received_invitations_size(); i++) {
    if (!this->received_invitations(i).IsInitialized()) return false;
  }
  return true;
}

void SubscribeToFriendsResponse::Swap(SubscribeToFriendsResponse* other) {
  if (other != this) {
    std::swap(max_friends_, other->max_friends_);
    std::swap(max_received_invitations_, other->max_received_invitations_);
    std::swap(max_sent_invitations_, other->max_sent_invitations_);
    friends_.Swap(&other->friends_);
    sent_invitations_.Swap(&other->sent_invitations_);
    received_invitations_.Swap(&other->received_invitations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeToFriendsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeToFriendsResponse_descriptor_;
  metadata.reflection = SubscribeToFriendsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsubscribeToFriendsRequest::kAgentIdFieldNumber;
const int UnsubscribeToFriendsRequest::kObjectIdFieldNumber;
#endif  // !_MSC_VER

UnsubscribeToFriendsRequest::UnsubscribeToFriendsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnsubscribeToFriendsRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

UnsubscribeToFriendsRequest::UnsubscribeToFriendsRequest(const UnsubscribeToFriendsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnsubscribeToFriendsRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeToFriendsRequest::~UnsubscribeToFriendsRequest() {
  SharedDtor();
}

void UnsubscribeToFriendsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void UnsubscribeToFriendsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeToFriendsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeToFriendsRequest_descriptor_;
}

const UnsubscribeToFriendsRequest& UnsubscribeToFriendsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

UnsubscribeToFriendsRequest* UnsubscribeToFriendsRequest::default_instance_ = NULL;

UnsubscribeToFriendsRequest* UnsubscribeToFriendsRequest::New() const {
  return new UnsubscribeToFriendsRequest;
}

void UnsubscribeToFriendsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsubscribeToFriendsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_id;
        break;
      }
      
      // optional uint64 object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnsubscribeToFriendsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // optional uint64 object_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnsubscribeToFriendsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // optional uint64 object_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnsubscribeToFriendsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // optional uint64 object_id = 2;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsubscribeToFriendsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsubscribeToFriendsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsubscribeToFriendsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsubscribeToFriendsRequest::MergeFrom(const UnsubscribeToFriendsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsubscribeToFriendsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeToFriendsRequest::CopyFrom(const UnsubscribeToFriendsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeToFriendsRequest::IsInitialized() const {
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeToFriendsRequest::Swap(UnsubscribeToFriendsRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsubscribeToFriendsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeToFriendsRequest_descriptor_;
  metadata.reflection = UnsubscribeToFriendsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenericFriendRequest::kAgentIdFieldNumber;
const int GenericFriendRequest::kTargetIdFieldNumber;
#endif  // !_MSC_VER

GenericFriendRequest::GenericFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenericFriendRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

GenericFriendRequest::GenericFriendRequest(const GenericFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenericFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericFriendRequest::~GenericFriendRequest() {
  SharedDtor();
}

void GenericFriendRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void GenericFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericFriendRequest_descriptor_;
}

const GenericFriendRequest& GenericFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

GenericFriendRequest* GenericFriendRequest::default_instance_ = NULL;

GenericFriendRequest* GenericFriendRequest::New() const {
  return new GenericFriendRequest;
}

void GenericFriendRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }
      
      // required .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenericFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenericFriendRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericFriendRequest::MergeFrom(const GenericFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericFriendRequest::CopyFrom(const GenericFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void GenericFriendRequest::Swap(GenericFriendRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenericFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericFriendRequest_descriptor_;
  metadata.reflection = GenericFriendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenericFriendResponse::kTargetFriendFieldNumber;
#endif  // !_MSC_VER

GenericFriendResponse::GenericFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenericFriendResponse::InitAsDefaultInstance() {
  target_friend_ = const_cast< ::bnet::protocol::friends::Friend*>(&::bnet::protocol::friends::Friend::default_instance());
}

GenericFriendResponse::GenericFriendResponse(const GenericFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenericFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  target_friend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericFriendResponse::~GenericFriendResponse() {
  SharedDtor();
}

void GenericFriendResponse::SharedDtor() {
  if (this != default_instance_) {
    delete target_friend_;
  }
}

void GenericFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericFriendResponse_descriptor_;
}

const GenericFriendResponse& GenericFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

GenericFriendResponse* GenericFriendResponse::default_instance_ = NULL;

GenericFriendResponse* GenericFriendResponse::New() const {
  return new GenericFriendResponse;
}

void GenericFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (target_friend_ != NULL) target_friend_->::bnet::protocol::friends::Friend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.friends.Friend target_friend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_friend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.friends.Friend target_friend = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_friend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenericFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.friends.Friend target_friend = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_friend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenericFriendResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.friends.Friend target_friend = 2;
    if (has_target_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_friend());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericFriendResponse::MergeFrom(const GenericFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_target_friend()->::bnet::protocol::friends::Friend::MergeFrom(from.target_friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericFriendResponse::CopyFrom(const GenericFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericFriendResponse::IsInitialized() const {
  
  if (has_target_friend()) {
    if (!this->target_friend().IsInitialized()) return false;
  }
  return true;
}

void GenericFriendResponse::Swap(GenericFriendResponse* other) {
  if (other != this) {
    std::swap(target_friend_, other->target_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenericFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericFriendResponse_descriptor_;
  metadata.reflection = GenericFriendResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SendInvitationRequest::_default_target_email_;
const ::std::string SendInvitationRequest::_default_display_string_;
#ifndef _MSC_VER
const int SendInvitationRequest::kTargetEmailFieldNumber;
const int SendInvitationRequest::kDisplayStringFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int SendInvitationRequest::kFriendRequestFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::bnet::protocol::invitation::SendInvitationRequest,
    ::google::protobuf::internal::MessageTypeTraits< ::bnet::protocol::friends::SendInvitationRequest >, 11, false >
  SendInvitationRequest::friend_request(kFriendRequestFieldNumber, ::bnet::protocol::friends::SendInvitationRequest::default_instance());
SendInvitationRequest::SendInvitationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendInvitationRequest::InitAsDefaultInstance() {
}

SendInvitationRequest::SendInvitationRequest(const SendInvitationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendInvitationRequest::SharedCtor() {
  _cached_size_ = 0;
  target_email_ = const_cast< ::std::string*>(&_default_target_email_);
  display_string_ = const_cast< ::std::string*>(&_default_display_string_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendInvitationRequest::~SendInvitationRequest() {
  SharedDtor();
}

void SendInvitationRequest::SharedDtor() {
  if (target_email_ != &_default_target_email_) {
    delete target_email_;
  }
  if (display_string_ != &_default_display_string_) {
    delete display_string_;
  }
  if (this != default_instance_) {
  }
}

void SendInvitationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendInvitationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendInvitationRequest_descriptor_;
}

const SendInvitationRequest& SendInvitationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

SendInvitationRequest* SendInvitationRequest::default_instance_ = NULL;

SendInvitationRequest* SendInvitationRequest::New() const {
  return new SendInvitationRequest;
}

void SendInvitationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (target_email_ != &_default_target_email_) {
        target_email_->clear();
      }
    }
    if (_has_bit(1)) {
      if (display_string_ != &_default_display_string_) {
        display_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendInvitationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string target_email = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_email().data(), this->target_email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_display_string;
        break;
      }
      
      // optional string display_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_string().data(), this->display_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendInvitationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string target_email = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_email().data(), this->target_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->target_email(), output);
  }
  
  // optional string display_string = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_string().data(), this->display_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->display_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendInvitationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string target_email = 3;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_email().data(), this->target_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target_email(), target);
  }
  
  // optional string display_string = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_string().data(), this->display_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->display_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendInvitationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string target_email = 3;
    if (has_target_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_email());
    }
    
    // optional string display_string = 4;
    if (has_display_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendInvitationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendInvitationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendInvitationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendInvitationRequest::MergeFrom(const SendInvitationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_target_email(from.target_email());
    }
    if (from._has_bit(1)) {
      set_display_string(from.display_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendInvitationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendInvitationRequest::CopyFrom(const SendInvitationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationRequest::IsInitialized() const {
  
  return true;
}

void SendInvitationRequest::Swap(SendInvitationRequest* other) {
  if (other != this) {
    std::swap(target_email_, other->target_email_);
    std::swap(display_string_, other->display_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendInvitationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendInvitationRequest_descriptor_;
  metadata.reflection = SendInvitationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewFriendsRequest::kAgentIdFieldNumber;
const int ViewFriendsRequest::kTargetIdFieldNumber;
const int ViewFriendsRequest::kFilterFieldNumber;
const int ViewFriendsRequest::kStartIndexFieldNumber;
const int ViewFriendsRequest::kMaxResultsFieldNumber;
#endif  // !_MSC_VER

ViewFriendsRequest::ViewFriendsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ViewFriendsRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  filter_ = const_cast< ::bnet::protocol::attribute::AttributeFilter*>(&::bnet::protocol::attribute::AttributeFilter::default_instance());
}

ViewFriendsRequest::ViewFriendsRequest(const ViewFriendsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ViewFriendsRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  filter_ = NULL;
  start_index_ = 0u;
  max_results_ = 100u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewFriendsRequest::~ViewFriendsRequest() {
  SharedDtor();
}

void ViewFriendsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
    delete filter_;
  }
}

void ViewFriendsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewFriendsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewFriendsRequest_descriptor_;
}

const ViewFriendsRequest& ViewFriendsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

ViewFriendsRequest* ViewFriendsRequest::default_instance_ = NULL;

ViewFriendsRequest* ViewFriendsRequest::New() const {
  return new ViewFriendsRequest;
}

void ViewFriendsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(2)) {
      if (filter_ != NULL) filter_->::bnet::protocol::attribute::AttributeFilter::Clear();
    }
    start_index_ = 0u;
    max_results_ = 100u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViewFriendsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }
      
      // required .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filter;
        break;
      }
      
      // required .bnet.protocol.attribute.AttributeFilter filter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_index;
        break;
      }
      
      // optional uint32 start_index = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_results;
        break;
      }
      
      // optional uint32 max_results = 5 [default = 100];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ViewFriendsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  // required .bnet.protocol.attribute.AttributeFilter filter = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->filter(), output);
  }
  
  // optional uint32 start_index = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_index(), output);
  }
  
  // optional uint32 max_results = 5 [default = 100];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_results(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ViewFriendsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  // required .bnet.protocol.attribute.AttributeFilter filter = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->filter(), target);
  }
  
  // optional uint32 start_index = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_index(), target);
  }
  
  // optional uint32 max_results = 5 [default = 100];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_results(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ViewFriendsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
    // required .bnet.protocol.attribute.AttributeFilter filter = 3;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
    // optional uint32 start_index = 4 [default = 0];
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }
    
    // optional uint32 max_results = 5 [default = 100];
    if (has_max_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_results());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewFriendsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewFriendsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewFriendsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViewFriendsRequest::MergeFrom(const ViewFriendsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
    if (from._has_bit(2)) {
      mutable_filter()->::bnet::protocol::attribute::AttributeFilter::MergeFrom(from.filter());
    }
    if (from._has_bit(3)) {
      set_start_index(from.start_index());
    }
    if (from._has_bit(4)) {
      set_max_results(from.max_results());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViewFriendsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewFriendsRequest::CopyFrom(const ViewFriendsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewFriendsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void ViewFriendsRequest::Swap(ViewFriendsRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(filter_, other->filter_);
    std::swap(start_index_, other->start_index_);
    std::swap(max_results_, other->max_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViewFriendsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewFriendsRequest_descriptor_;
  metadata.reflection = ViewFriendsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewFriendsResponse::kFriendsFieldNumber;
const int ViewFriendsResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

ViewFriendsResponse::ViewFriendsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ViewFriendsResponse::InitAsDefaultInstance() {
}

ViewFriendsResponse::ViewFriendsResponse(const ViewFriendsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ViewFriendsResponse::SharedCtor() {
  _cached_size_ = 0;
  total_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewFriendsResponse::~ViewFriendsResponse() {
  SharedDtor();
}

void ViewFriendsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ViewFriendsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewFriendsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewFriendsResponse_descriptor_;
}

const ViewFriendsResponse& ViewFriendsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

ViewFriendsResponse* ViewFriendsResponse::default_instance_ = NULL;

ViewFriendsResponse* ViewFriendsResponse::New() const {
  return new ViewFriendsResponse;
}

void ViewFriendsResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_results_ = 0u;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViewFriendsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bnet.protocol.friends.Friend friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectTag(16)) goto parse_total_results;
        break;
      }
      
      // optional uint32 total_results = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_results_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ViewFriendsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bnet.protocol.friends.Friend friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }
  
  // optional uint32 total_results = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_results(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ViewFriendsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bnet.protocol.friends.Friend friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }
  
  // optional uint32 total_results = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_results(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ViewFriendsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 total_results = 2;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_results());
    }
    
  }
  // repeated .bnet.protocol.friends.Friend friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewFriendsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewFriendsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewFriendsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViewFriendsResponse::MergeFrom(const ViewFriendsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_total_results(from.total_results());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViewFriendsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewFriendsResponse::CopyFrom(const ViewFriendsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewFriendsResponse::IsInitialized() const {
  
  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void ViewFriendsResponse::Swap(ViewFriendsResponse* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(total_results_, other->total_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViewFriendsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewFriendsResponse_descriptor_;
  metadata.reflection = ViewFriendsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendStateRequest::kAgentIdFieldNumber;
const int UpdateFriendStateRequest::kTargetIdFieldNumber;
const int UpdateFriendStateRequest::kAttributeFieldNumber;
#endif  // !_MSC_VER

UpdateFriendStateRequest::UpdateFriendStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFriendStateRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

UpdateFriendStateRequest::UpdateFriendStateRequest(const UpdateFriendStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFriendStateRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendStateRequest::~UpdateFriendStateRequest() {
  SharedDtor();
}

void UpdateFriendStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete target_id_;
  }
}

void UpdateFriendStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendStateRequest_descriptor_;
}

const UpdateFriendStateRequest& UpdateFriendStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

UpdateFriendStateRequest* UpdateFriendStateRequest::default_instance_ = NULL;

UpdateFriendStateRequest* UpdateFriendStateRequest::New() const {
  return new UpdateFriendStateRequest;
}

void UpdateFriendStateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_id_ != NULL) agent_id_->::bnet::protocol::EntityId::Clear();
    }
    if (_has_bit(1)) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFriendStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bnet.protocol.EntityId agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }
      
      // required .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFriendStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFriendStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bnet.protocol.EntityId agent_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }
  
  // required .bnet.protocol.EntityId target_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFriendStateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bnet.protocol.EntityId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }
    
    // required .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFriendStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFriendStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFriendStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFriendStateRequest::MergeFrom(const UpdateFriendStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent_id()->::bnet::protocol::EntityId::MergeFrom(from.agent_id());
    }
    if (from._has_bit(1)) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFriendStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendStateRequest::CopyFrom(const UpdateFriendStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateFriendStateRequest::Swap(UpdateFriendStateRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(target_id_, other->target_id_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFriendStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendStateRequest_descriptor_;
  metadata.reflection = UpdateFriendStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFriendStateResponse::kTargetIdFieldNumber;
const int UpdateFriendStateResponse::kAttributeFieldNumber;
#endif  // !_MSC_VER

UpdateFriendStateResponse::UpdateFriendStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFriendStateResponse::InitAsDefaultInstance() {
  target_id_ = const_cast< ::bnet::protocol::EntityId*>(&::bnet::protocol::EntityId::default_instance());
}

UpdateFriendStateResponse::UpdateFriendStateResponse(const UpdateFriendStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFriendStateResponse::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFriendStateResponse::~UpdateFriendStateResponse() {
  SharedDtor();
}

void UpdateFriendStateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete target_id_;
  }
}

void UpdateFriendStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFriendStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFriendStateResponse_descriptor_;
}

const UpdateFriendStateResponse& UpdateFriendStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

UpdateFriendStateResponse* UpdateFriendStateResponse::default_instance_ = NULL;

UpdateFriendStateResponse* UpdateFriendStateResponse::New() const {
  return new UpdateFriendStateResponse;
}

void UpdateFriendStateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (target_id_ != NULL) target_id_->::bnet::protocol::EntityId::Clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFriendStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.EntityId target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateFriendStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.EntityId target_id = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_id(), output);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFriendStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.EntityId target_id = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_id(), target);
  }
  
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFriendStateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.EntityId target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }
    
  }
  // repeated .bnet.protocol.attribute.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFriendStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFriendStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFriendStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFriendStateResponse::MergeFrom(const UpdateFriendStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_target_id()->::bnet::protocol::EntityId::MergeFrom(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFriendStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFriendStateResponse::CopyFrom(const UpdateFriendStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFriendStateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  for (int i = 0; i < attribute_size(); i++) {
    if (!this->attribute(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateFriendStateResponse::Swap(UpdateFriendStateResponse* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFriendStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFriendStateResponse_descriptor_;
  metadata.reflection = UpdateFriendStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendNotification::kTargetFieldNumber;
#endif  // !_MSC_VER

FriendNotification::FriendNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendNotification::InitAsDefaultInstance() {
  target_ = const_cast< ::bnet::protocol::friends::Friend*>(&::bnet::protocol::friends::Friend::default_instance());
}

FriendNotification::FriendNotification(const FriendNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendNotification::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendNotification::~FriendNotification() {
  SharedDtor();
}

void FriendNotification::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void FriendNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendNotification_descriptor_;
}

const FriendNotification& FriendNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

FriendNotification* FriendNotification::default_instance_ = NULL;

FriendNotification* FriendNotification::New() const {
  return new FriendNotification;
}

void FriendNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (target_ != NULL) target_->::bnet::protocol::friends::Friend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.friends.Friend target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.friends.Friend target = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.friends.Friend target = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.friends.Friend target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendNotification::MergeFrom(const FriendNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_target()->::bnet::protocol::friends::Friend::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendNotification::CopyFrom(const FriendNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void FriendNotification::Swap(FriendNotification* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendNotification_descriptor_;
  metadata.reflection = FriendNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationAddedNotification::kInvitationFieldNumber;
#endif  // !_MSC_VER

InvitationAddedNotification::InvitationAddedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvitationAddedNotification::InitAsDefaultInstance() {
  invitation_ = const_cast< ::bnet::protocol::invitation::Invitation*>(&::bnet::protocol::invitation::Invitation::default_instance());
}

InvitationAddedNotification::InvitationAddedNotification(const InvitationAddedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvitationAddedNotification::SharedCtor() {
  _cached_size_ = 0;
  invitation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationAddedNotification::~InvitationAddedNotification() {
  SharedDtor();
}

void InvitationAddedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete invitation_;
  }
}

void InvitationAddedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationAddedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitationAddedNotification_descriptor_;
}

const InvitationAddedNotification& InvitationAddedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

InvitationAddedNotification* InvitationAddedNotification::default_instance_ = NULL;

InvitationAddedNotification* InvitationAddedNotification::New() const {
  return new InvitationAddedNotification;
}

void InvitationAddedNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (invitation_ != NULL) invitation_->::bnet::protocol::invitation::Invitation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitationAddedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.invitation.Invitation invitation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitationAddedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.invitation.Invitation invitation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->invitation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvitationAddedNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.invitation.Invitation invitation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->invitation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvitationAddedNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.invitation.Invitation invitation = 1;
    if (has_invitation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationAddedNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitationAddedNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitationAddedNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitationAddedNotification::MergeFrom(const InvitationAddedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_invitation()->::bnet::protocol::invitation::Invitation::MergeFrom(from.invitation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitationAddedNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationAddedNotification::CopyFrom(const InvitationAddedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationAddedNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_invitation()) {
    if (!this->invitation().IsInitialized()) return false;
  }
  return true;
}

void InvitationAddedNotification::Swap(InvitationAddedNotification* other) {
  if (other != this) {
    std::swap(invitation_, other->invitation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitationAddedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitationAddedNotification_descriptor_;
  metadata.reflection = InvitationAddedNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationRemovedNotification::kInvitationFieldNumber;
const int InvitationRemovedNotification::kReasonFieldNumber;
const int InvitationRemovedNotification::kAddedFriendFieldNumber;
#endif  // !_MSC_VER

InvitationRemovedNotification::InvitationRemovedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvitationRemovedNotification::InitAsDefaultInstance() {
  invitation_ = const_cast< ::bnet::protocol::invitation::Invitation*>(&::bnet::protocol::invitation::Invitation::default_instance());
  added_friend_ = const_cast< ::bnet::protocol::friends::Friend*>(&::bnet::protocol::friends::Friend::default_instance());
}

InvitationRemovedNotification::InvitationRemovedNotification(const InvitationRemovedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvitationRemovedNotification::SharedCtor() {
  _cached_size_ = 0;
  invitation_ = NULL;
  reason_ = 0u;
  added_friend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationRemovedNotification::~InvitationRemovedNotification() {
  SharedDtor();
}

void InvitationRemovedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete invitation_;
    delete added_friend_;
  }
}

void InvitationRemovedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationRemovedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitationRemovedNotification_descriptor_;
}

const InvitationRemovedNotification& InvitationRemovedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2ffriends_2fdefinition_2ffriends_2eproto();  return *default_instance_;
}

InvitationRemovedNotification* InvitationRemovedNotification::default_instance_ = NULL;

InvitationRemovedNotification* InvitationRemovedNotification::New() const {
  return new InvitationRemovedNotification;
}

void InvitationRemovedNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (invitation_ != NULL) invitation_->::bnet::protocol::invitation::Invitation::Clear();
    }
    reason_ = 0u;
    if (_has_bit(2)) {
      if (added_friend_ != NULL) added_friend_->::bnet::protocol::friends::Friend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitationRemovedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .bnet.protocol.invitation.Invitation invitation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_added_friend;
        break;
      }
      
      // optional .bnet.protocol.friends.Friend added_friend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_added_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_added_friend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitationRemovedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .bnet.protocol.invitation.Invitation invitation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->invitation(), output);
  }
  
  // optional uint32 reason = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }
  
  // optional .bnet.protocol.friends.Friend added_friend = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->added_friend(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvitationRemovedNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .bnet.protocol.invitation.Invitation invitation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->invitation(), target);
  }
  
  // optional uint32 reason = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }
  
  // optional .bnet.protocol.friends.Friend added_friend = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->added_friend(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvitationRemovedNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .bnet.protocol.invitation.Invitation invitation = 1;
    if (has_invitation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitation());
    }
    
    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }
    
    // optional .bnet.protocol.friends.Friend added_friend = 3;
    if (has_added_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->added_friend());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationRemovedNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitationRemovedNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitationRemovedNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitationRemovedNotification::MergeFrom(const InvitationRemovedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_invitation()->::bnet::protocol::invitation::Invitation::MergeFrom(from.invitation());
    }
    if (from._has_bit(1)) {
      set_reason(from.reason());
    }
    if (from._has_bit(2)) {
      mutable_added_friend()->::bnet::protocol::friends::Friend::MergeFrom(from.added_friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitationRemovedNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationRemovedNotification::CopyFrom(const InvitationRemovedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationRemovedNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_invitation()) {
    if (!this->invitation().IsInitialized()) return false;
  }
  if (has_added_friend()) {
    if (!this->added_friend().IsInitialized()) return false;
  }
  return true;
}

void InvitationRemovedNotification::Swap(InvitationRemovedNotification* other) {
  if (other != this) {
    std::swap(invitation_, other->invitation_);
    std::swap(reason_, other->reason_);
    std::swap(added_friend_, other->added_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitationRemovedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitationRemovedNotification_descriptor_;
  metadata.reflection = InvitationRemovedNotification_reflection_;
  return metadata;
}


// ===================================================================

FriendsService::~FriendsService() {}

const ::google::protobuf::ServiceDescriptor* FriendsService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FriendsService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsService_descriptor_;
}

void FriendsService::SubscribeToFriends(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::friends::SubscribeToFriendsRequest*,
                         ::bnet::protocol::friends::SubscribeToFriendsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SubscribeToFriends() not implemented.");
  done->Run();
}

void FriendsService::SendInvitation(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::invitation::SendInvitationRequest*,
                         ::bnet::protocol::invitation::SendInvitationResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendInvitation() not implemented.");
  done->Run();
}

void FriendsService::AcceptInvitation(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::invitation::GenericRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AcceptInvitation() not implemented.");
  done->Run();
}

void FriendsService::RevokeInvitation(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::invitation::GenericRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RevokeInvitation() not implemented.");
  done->Run();
}

void FriendsService::DeclineInvitation(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::invitation::GenericRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeclineInvitation() not implemented.");
  done->Run();
}

void FriendsService::IgnoreInvitation(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::invitation::GenericRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IgnoreInvitation() not implemented.");
  done->Run();
}

void FriendsService::RemoveFriend(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::friends::GenericFriendRequest*,
                         ::bnet::protocol::friends::GenericFriendResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveFriend() not implemented.");
  done->Run();
}

void FriendsService::ViewFriends(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::friends::ViewFriendsRequest*,
                         ::bnet::protocol::friends::ViewFriendsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ViewFriends() not implemented.");
  done->Run();
}

void FriendsService::UpdateFriendState(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::friends::UpdateFriendStateRequest*,
                         ::bnet::protocol::friends::UpdateFriendStateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateFriendState() not implemented.");
  done->Run();
}

void FriendsService::UnsubscribeToFriends(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::friends::UnsubscribeToFriendsRequest*,
                         ::bnet::protocol::NoData*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UnsubscribeToFriends() not implemented.");
  done->Run();
}

void FriendsService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FriendsService_descriptor_);
  switch(method->index()) {
    case 0:
      SubscribeToFriends(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::friends::SubscribeToFriendsRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::friends::SubscribeToFriendsResponse*>(response),
             done);
      break;
    case 1:
      SendInvitation(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::invitation::SendInvitationRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::invitation::SendInvitationResponse*>(response),
             done);
      break;
    case 2:
      AcceptInvitation(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::invitation::GenericRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    case 3:
      RevokeInvitation(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::invitation::GenericRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    case 4:
      DeclineInvitation(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::invitation::GenericRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    case 5:
      IgnoreInvitation(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::invitation::GenericRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    case 6:
      RemoveFriend(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::friends::GenericFriendRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::friends::GenericFriendResponse*>(response),
             done);
      break;
    case 7:
      ViewFriends(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::friends::ViewFriendsRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::friends::ViewFriendsResponse*>(response),
             done);
      break;
    case 8:
      UpdateFriendState(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::friends::UpdateFriendStateRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::friends::UpdateFriendStateResponse*>(response),
             done);
      break;
    case 9:
      UnsubscribeToFriends(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::friends::UnsubscribeToFriendsRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NoData*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FriendsService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::friends::SubscribeToFriendsRequest::default_instance();
    case 1:
      return ::bnet::protocol::invitation::SendInvitationRequest::default_instance();
    case 2:
      return ::bnet::protocol::invitation::GenericRequest::default_instance();
    case 3:
      return ::bnet::protocol::invitation::GenericRequest::default_instance();
    case 4:
      return ::bnet::protocol::invitation::GenericRequest::default_instance();
    case 5:
      return ::bnet::protocol::invitation::GenericRequest::default_instance();
    case 6:
      return ::bnet::protocol::friends::GenericFriendRequest::default_instance();
    case 7:
      return ::bnet::protocol::friends::ViewFriendsRequest::default_instance();
    case 8:
      return ::bnet::protocol::friends::UpdateFriendStateRequest::default_instance();
    case 9:
      return ::bnet::protocol::friends::UnsubscribeToFriendsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& FriendsService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::friends::SubscribeToFriendsResponse::default_instance();
    case 1:
      return ::bnet::protocol::invitation::SendInvitationResponse::default_instance();
    case 2:
      return ::bnet::protocol::NoData::default_instance();
    case 3:
      return ::bnet::protocol::NoData::default_instance();
    case 4:
      return ::bnet::protocol::NoData::default_instance();
    case 5:
      return ::bnet::protocol::NoData::default_instance();
    case 6:
      return ::bnet::protocol::friends::GenericFriendResponse::default_instance();
    case 7:
      return ::bnet::protocol::friends::ViewFriendsResponse::default_instance();
    case 8:
      return ::bnet::protocol::friends::UpdateFriendStateResponse::default_instance();
    case 9:
      return ::bnet::protocol::NoData::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

FriendsService_Stub::FriendsService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendsService_Stub::FriendsService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FriendsService_Stub::~FriendsService_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendsService_Stub::SubscribeToFriends(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::friends::SubscribeToFriendsRequest* request,
                              ::bnet::protocol::friends::SubscribeToFriendsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendsService_Stub::SendInvitation(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::invitation::SendInvitationRequest* request,
                              ::bnet::protocol::invitation::SendInvitationResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendsService_Stub::AcceptInvitation(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::invitation::GenericRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendsService_Stub::RevokeInvitation(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::invitation::GenericRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void FriendsService_Stub::DeclineInvitation(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::invitation::GenericRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void FriendsService_Stub::IgnoreInvitation(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::invitation::GenericRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void FriendsService_Stub::RemoveFriend(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::friends::GenericFriendRequest* request,
                              ::bnet::protocol::friends::GenericFriendResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void FriendsService_Stub::ViewFriends(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::friends::ViewFriendsRequest* request,
                              ::bnet::protocol::friends::ViewFriendsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void FriendsService_Stub::UpdateFriendState(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::friends::UpdateFriendStateRequest* request,
                              ::bnet::protocol::friends::UpdateFriendStateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void FriendsService_Stub::UnsubscribeToFriends(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::friends::UnsubscribeToFriendsRequest* request,
                              ::bnet::protocol::NoData* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
// ===================================================================

FriendsNotify::~FriendsNotify() {}

const ::google::protobuf::ServiceDescriptor* FriendsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsNotify_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FriendsNotify::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsNotify_descriptor_;
}

void FriendsNotify::NotifyFriendAdded(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::friends::FriendNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyFriendAdded() not implemented.");
  done->Run();
}

void FriendsNotify::NotifyFriendRemoved(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::friends::FriendNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyFriendRemoved() not implemented.");
  done->Run();
}

void FriendsNotify::NotifyReceivedInvitationAdded(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::friends::InvitationAddedNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyReceivedInvitationAdded() not implemented.");
  done->Run();
}

void FriendsNotify::NotifyReceivedInvitationRemoved(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::friends::InvitationRemovedNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyReceivedInvitationRemoved() not implemented.");
  done->Run();
}

void FriendsNotify::NotifySentInvitationRemoved(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::friends::InvitationRemovedNotification*,
                         ::bnet::protocol::NO_RESPONSE*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifySentInvitationRemoved() not implemented.");
  done->Run();
}

void FriendsNotify::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FriendsNotify_descriptor_);
  switch(method->index()) {
    case 0:
      NotifyFriendAdded(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::friends::FriendNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    case 1:
      NotifyFriendRemoved(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::friends::FriendNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    case 2:
      NotifyReceivedInvitationAdded(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::friends::InvitationAddedNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    case 3:
      NotifyReceivedInvitationRemoved(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::friends::InvitationRemovedNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    case 4:
      NotifySentInvitationRemoved(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::friends::InvitationRemovedNotification*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::NO_RESPONSE*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FriendsNotify::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::friends::FriendNotification::default_instance();
    case 1:
      return ::bnet::protocol::friends::FriendNotification::default_instance();
    case 2:
      return ::bnet::protocol::friends::InvitationAddedNotification::default_instance();
    case 3:
      return ::bnet::protocol::friends::InvitationRemovedNotification::default_instance();
    case 4:
      return ::bnet::protocol::friends::InvitationRemovedNotification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& FriendsNotify::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    case 1:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    case 2:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    case 3:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    case 4:
      return ::bnet::protocol::NO_RESPONSE::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

FriendsNotify_Stub::FriendsNotify_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendsNotify_Stub::FriendsNotify_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FriendsNotify_Stub::~FriendsNotify_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendsNotify_Stub::NotifyFriendAdded(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::friends::FriendNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendsNotify_Stub::NotifyFriendRemoved(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::friends::FriendNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendsNotify_Stub::NotifyReceivedInvitationAdded(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::friends::InvitationAddedNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendsNotify_Stub::NotifyReceivedInvitationRemoved(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::friends::InvitationRemovedNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void FriendsNotify_Stub::NotifySentInvitationRemoved(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::friends::InvitationRemovedNotification* request,
                              ::bnet::protocol::NO_RESPONSE* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace friends
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
