// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/chat/definition/chat.proto

#ifndef PROTOBUF_service_2fchat_2fdefinition_2fchat_2eproto__INCLUDED
#define PROTOBUF_service_2fchat_2fdefinition_2fchat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
#include "lib/protocol/attribute.pb.h"
#include "lib/protocol/entity.pb.h"
#include "lib/protocol/invitation.pb.h"
#include "lib/rpc/rpc.pb.h"
#include "service/channel/channel_types.pb.h"
#include "service/chat/definition/chat_types.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2fchat_2fdefinition_2fchat_2eproto();
void protobuf_AssignDesc_service_2fchat_2fdefinition_2fchat_2eproto();
void protobuf_ShutdownFile_service_2fchat_2fdefinition_2fchat_2eproto();


// ===================================================================


// ===================================================================

class ChatService_Stub;

class ChatService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ChatService() {};
 public:
  virtual ~ChatService();
  
  typedef ChatService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void FindChannel(::google::protobuf::RpcController* controller,
                       const ::bnet::protocol::channel::FindChannelRequest* request,
                       ::bnet::protocol::channel::FindChannelResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateChannel(::google::protobuf::RpcController* controller,
                       const ::bnet::protocol::channel::CreateChannelRequest* request,
                       ::bnet::protocol::channel::CreateChannelResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void JoinChannel(::google::protobuf::RpcController* controller,
                       const ::bnet::protocol::channel::JoinChannelRequest* request,
                       ::bnet::protocol::channel::JoinChannelResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatService);
};

class ChatService_Stub : public ChatService {
 public:
  ChatService_Stub(::google::protobuf::RpcChannel* channel);
  ChatService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ChatService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements ChatService ------------------------------------------
  
  void FindChannel(::google::protobuf::RpcController* controller,
                       const ::bnet::protocol::channel::FindChannelRequest* request,
                       ::bnet::protocol::channel::FindChannelResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateChannel(::google::protobuf::RpcController* controller,
                       const ::bnet::protocol::channel::CreateChannelRequest* request,
                       ::bnet::protocol::channel::CreateChannelResponse* response,
                       ::google::protobuf::Closure* done);
  void JoinChannel(::google::protobuf::RpcController* controller,
                       const ::bnet::protocol::channel::JoinChannelRequest* request,
                       ::bnet::protocol::channel::JoinChannelResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChatService_Stub);
};


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2fchat_2fdefinition_2fchat_2eproto__INCLUDED
