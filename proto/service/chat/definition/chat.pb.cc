// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service/chat/definition/chat.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace chat {

namespace {

const ::google::protobuf::ServiceDescriptor* ChatService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2fchat_2fdefinition_2fchat_2eproto() {
  protobuf_AddDesc_service_2fchat_2fdefinition_2fchat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service/chat/definition/chat.proto");
  GOOGLE_CHECK(file != NULL);
  ChatService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2fchat_2fdefinition_2fchat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_service_2fchat_2fdefinition_2fchat_2eproto() {
}

void protobuf_AddDesc_service_2fchat_2fdefinition_2fchat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bnet::protocol::attribute::protobuf_AddDesc_lib_2fprotocol_2fattribute_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2fprotocol_2fentity_2eproto();
  ::bnet::protocol::invitation::protobuf_AddDesc_lib_2fprotocol_2finvitation_2eproto();
  ::bnet::protocol::protobuf_AddDesc_lib_2frpc_2frpc_2eproto();
  ::bnet::protocol::channel::protobuf_AddDesc_service_2fchannel_2fchannel_5ftypes_2eproto();
  ::bnet::protocol::chat::protobuf_AddDesc_service_2fchat_2fdefinition_2fchat_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"service/chat/definition/chat.proto\022\022bn"
    "et.protocol.chat\032\034lib/protocol/attribute"
    ".proto\032\031lib/protocol/entity.proto\032\035lib/p"
    "rotocol/invitation.proto\032\021lib/rpc/rpc.pr"
    "oto\032#service/channel/channel_types.proto"
    "\032(service/chat/definition/chat_types.pro"
    "to2\305\002\n\013ChatService\022d\n\013FindChannel\022).bnet"
    ".protocol.channel.FindChannelRequest\032*.b"
    "net.protocol.channel.FindChannelResponse"
    "\022j\n\rCreateChannel\022+.bnet.protocol.channe"
    "l.CreateChannelRequest\032,.bnet.protocol.c"
    "hannel.CreateChannelResponse\022d\n\013JoinChan"
    "nel\022).bnet.protocol.channel.JoinChannelR"
    "equest\032*.bnet.protocol.channel.JoinChann"
    "elResponseB\003\200\001\001", 575);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service/chat/definition/chat.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2fchat_2fdefinition_2fchat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2fchat_2fdefinition_2fchat_2eproto {
  StaticDescriptorInitializer_service_2fchat_2fdefinition_2fchat_2eproto() {
    protobuf_AddDesc_service_2fchat_2fdefinition_2fchat_2eproto();
  }
} static_descriptor_initializer_service_2fchat_2fdefinition_2fchat_2eproto_;


// ===================================================================

ChatService::~ChatService() {}

const ::google::protobuf::ServiceDescriptor* ChatService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ChatService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatService_descriptor_;
}

void ChatService::FindChannel(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::FindChannelRequest*,
                         ::bnet::protocol::channel::FindChannelResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FindChannel() not implemented.");
  done->Run();
}

void ChatService::CreateChannel(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::CreateChannelRequest*,
                         ::bnet::protocol::channel::CreateChannelResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateChannel() not implemented.");
  done->Run();
}

void ChatService::JoinChannel(::google::protobuf::RpcController* controller,
                         const ::bnet::protocol::channel::JoinChannelRequest*,
                         ::bnet::protocol::channel::JoinChannelResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JoinChannel() not implemented.");
  done->Run();
}

void ChatService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ChatService_descriptor_);
  switch(method->index()) {
    case 0:
      FindChannel(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::FindChannelRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::channel::FindChannelResponse*>(response),
             done);
      break;
    case 1:
      CreateChannel(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::CreateChannelRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::channel::CreateChannelResponse*>(response),
             done);
      break;
    case 2:
      JoinChannel(controller,
             ::google::protobuf::down_cast<const ::bnet::protocol::channel::JoinChannelRequest*>(request),
             ::google::protobuf::down_cast< ::bnet::protocol::channel::JoinChannelResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChatService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::channel::FindChannelRequest::default_instance();
    case 1:
      return ::bnet::protocol::channel::CreateChannelRequest::default_instance();
    case 2:
      return ::bnet::protocol::channel::JoinChannelRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ChatService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bnet::protocol::channel::FindChannelResponse::default_instance();
    case 1:
      return ::bnet::protocol::channel::CreateChannelResponse::default_instance();
    case 2:
      return ::bnet::protocol::channel::JoinChannelResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ChatService_Stub::ChatService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatService_Stub::ChatService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChatService_Stub::~ChatService_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatService_Stub::FindChannel(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::FindChannelRequest* request,
                              ::bnet::protocol::channel::FindChannelResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChatService_Stub::CreateChannel(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::CreateChannelRequest* request,
                              ::bnet::protocol::channel::CreateChannelResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChatService_Stub::JoinChannel(::google::protobuf::RpcController* controller,
                              const ::bnet::protocol::channel::JoinChannelRequest* request,
                              ::bnet::protocol::channel::JoinChannelResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace protocol
}  // namespace bnet

// @@protoc_insertion_point(global_scope)
